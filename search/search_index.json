{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview \u00b6 The following macros are available in the SMILE - Smart SAS Macros - an Intuitive Library Extension. Macro Description smile_attr_var Function-style macro to return a variable attribute of a dataset. The following attributes are available: VARTYPE, VARLEN, VARLABEL, VARFMT and VARINFMT smile_attrc Function-style macro to return a character attribute of a dataset. The following attributes are available: CHARSET, COMPRESS, DATAREP, ENCODING, ENCRYPT, ENGINE, LABEL, LIB, MEM, MODE, MTYPE, SORTEDBY, SORTLVL, SORTSEQ, TYPE smile_attrn Function-style macro to return a numeric attribute of a dataset. The following attributes are available: ALTERPW, ANOBS, ANY, ARAND, ARWU, AUDIT, AUDIT_DATA, AUDIT_BEFORE, AUDIT_ERROR, CRDTE, ICONST, INDEX, ISINDEX, ISSUBSET, LRECL, LRID, MAXGEN, MAXRC, MODTE, NDEL, NEXTGEN, NLOBS, NLOBSF, NOBS, NVARS, PW, RADIX, READPW, REUSE, TAPE, WHSTMT, WRITEPW smile_ods_document_flat_label Flat navigation and optionally re-label navigation for ODS DOCUMENT. The navigation bookmark level is reduced to one level only. Optionally a label can be applied to all content items or the navigation label can be removed completely. smile_pdf_merge Merge multiple PDF files and create one bookmark entry per PDF file with PROC GROOVY and open-source Tool PDFBox smile_pdf_read_bookmarks Read PDF Bookmarks into a SAS dataset with the variables level, title and page smile_url_check Check existence of URL and store result in return code, information can optionally be printed to the log smile_url_download Downloads a file from an URL and store it locally on OUTFILE. Additionally return code can be stored and information can optionally be printed to the log. Macros \u00b6 smile_attr_var \u00b6 Key Description Name smile_attr_var Purpose Function-style macro to return a variable attribute of a dataset. The following attributes are available: VARTYPE, VARLEN, VARLABEL, VARFMT and VARINFMT SAS Version SAS 9.4 Author Katja Glass Date 2021-01-04 Reference Main programming parts are coming from attrv.sas macro from Roland Rashleigh-Berry who has published his code under the unlicence license in his utility package (http://www.datasavantconsulting.com/roland/Spectre/download.html) The following parameters are used: Parameter Description DATA name of the SAS dataset VAR name of variable ATTRIB SAS variable attrib keyword (e.g. VARTYPE, VARLEN, VARLABEL, VARFMT and VARINFMT) smile_attrc \u00b6 Key Description Name smile_attrc Purpose Function-style macro to return a character attribute of a dataset. The following attributes are available: CHARSET, COMPRESS, DATAREP, ENCODING, ENCRYPT, ENGINE, LABEL, LIB, MEM, MODE, MTYPE, SORTEDBY, SORTLVL, SORTSEQ, TYPE SAS Version SAS 9.4 Author Katja Glass Date 2021-01-04 Reference Main programming parts are coming from attrc.sas macro from Roland Rashleigh-Berry who has published his code under the unlicence license in his utility package (http://www.datasavantconsulting.com/roland/Spectre/download.html) The following parameters are used: Parameter Description DATA name of the SAS dataset ATTRIB SAS ATTRC keyword (e.g. TYPE, LIB, LABEL, SORTEDBY, ...) smile_attrn \u00b6 Key Description Name smile_attrn Purpose Function-style macro to return a numeric attribute of a dataset. The following attributes are available: ALTERPW, ANOBS, ANY, ARAND, ARWU, AUDIT, AUDIT_DATA, AUDIT_BEFORE, AUDIT_ERROR, CRDTE, ICONST, INDEX, ISINDEX, ISSUBSET, LRECL, LRID, MAXGEN, MAXRC, MODTE, NDEL, NEXTGEN, NLOBS, NLOBSF, NOBS, NVARS, PW, RADIX, READPW, REUSE, TAPE, WHSTMT, WRITEPW SAS Version SAS 9.4 Author Katja Glass Date 2021-01-04 Reference Main programming parts are coming from attrn.sas macro from Roland Rashleigh-Berry who has published his code under the unlicence license in his utility package (http://www.datasavantconsulting.com/roland/Spectre/download.html) The following parameters are used: Parameter Description DATA name of the SAS dataset ATTRIB SAS ATTRN keyword (e.g. NOBS, CRDTE, ...) smile_ods_document_flat_label \u00b6 Key Description Name smile_ods_document_flat_label Purpose Flat navigation and optionally re-label navigation for ODS DOCUMENT. The navigation bookmark level is reduced to one level only. Optionally a label can be applied to all content items or the navigation label can be removed completely. Comment The navigation in PDF documents can be one level only with this macro. CONTENTS=\"\" must be applied to the PROC REPORT as option and additionally for a BREAK BEFORE PAGE option. Issues The table of contents created per default by SAS (ODS PDF option TOC) is not linking the pages correctly when using BY groups and having one ODS DOCUMENT with multiple outputs, using single ODS DOCUMENTS (one per each output) then this is working correctly. In such a case, do use not a TOC or create an own TOC, e.g. like described here: https://www.mwsug.org/proceedings/2012/S1/MWSUG-2012-S125.pdf SAS Version SAS 9.4 Author Katja Glass Date 2021-02-15 Example Program ../programs/test_smile_ods_document_flat_label.sas Reference A nice overview of ODS DOCUMENT can be found here: https://support.sas.com/resources/papers/proceedings12/273-2012.pdf The following parameters are used: Parameter Description DOCUMENT ODS Document item store LABEL One label to apply on first element, all other labels are removed (optional), if not provided, labels are just rearranged and additional BY-labels removed BOOKMARKLABEL Indicator whether to use Bookmark Labels if none is specified (YES Default), if LABEL is missing and BOOKMARKLABEL = NO, all labels are removed smile_pdf_merge \u00b6 Key Description Name smile_pdf_merge Purpose Merge multiple PDF files and create one bookmark entry per PDF file with PROC GROOVY and open-source Tool PDFBox Comment Make sure to download PDFBOX, e.g. from here https://pdfbox.apache.org/download.html - the full \"app\" version Issues \"unable to resolve class\" messages mean the PDFBOX is not provided correctly. \"ERROR: PROCEDURE GROOVY cannot be used when SAS is in the lock down state.\" means that your SAS environment does not support PROC GROOVY, for this the macro cannot run the groovy code. \"WARNUNG: Removed /IDTree from /Names dictionary, doesn't belong there\" - this message is coming from PDFBox. SAS Version SAS 9.4 Author Katja Glass Date 2021-01-29 Example Program ../programs/test_smile_pdf_merge.sas Reference A paper explaining how to use PDFBOX with PROC GROOVY also for TOC is available in the following paper (https://www.lexjansen.com/phuse/2019/ct/CT05.pdf) The following parameters are used: Parameter Description DATA Input dataset containing INFILE and BOOKMARK variable, INFILE containing single pdf files (one file per observation), BOOKMARK containing the corresponding bookmark label for this file OUTFILE Output PDF file (not in quotes) PDFBOX_JAR_PATH Path and jar file name for PDFBOX open source tool, e.g. &path/pdfbox-app-2.0.22.jar SOURCEFILE Optional SAS program file where PROC GROOVY code is stored, default is TEMP (only temporary) RUN_GROOVY NO/YES indicator whether to run the final GROOVY code (default YES) smile_pdf_read_bookmarks \u00b6 Key Description Name smile_pdf_read_bookmarks Purpose Read PDF Bookmarks into a SAS dataset with the variables level, title and page Comment Make sure to download PDFBOX, e.g. from here https://pdfbox.apache.org/download.html - the full \"app\" version Issues \"unable to resolve class\" messages mean the PDFBOX is not provided correctly. \"ERROR: PROCEDURE GROOVY cannot be used when SAS is in the lock down state.\" means that your SAS environment does not support PROC GROOVY, for this the macro cannot run the groovy code. SAS Version SAS 9.4 Author Katja Glass Date 2021-02-13 Example Program ../programs/test_smile_pdf_read_bookmarks.sas Reference PDFBox contains a lot of useful functionalities (https://pdfbox.apache.org) The following parameters are used: Parameter Description PDFFILE name of PDF file with bookmarks OUTDAT output dataset PDFBOX_JAR path and jar file name for PDFBOX open source tool, e.g. &path/pdfbox-app-2.0.22.jar smile_url_check \u00b6 Key Description Name smile_url_check Purpose Check existence of URL and store result in return code, information can optionally be printed to the log Comment Return codes are 0 - url found, 999 - no url provided, 998 - url not provided in quotes, otherwise html-return code (e.g. 404 file not found) SAS Version SAS 9.4 Author Katja Glass Date 2021-01-04 Reference The idea from this macro is coming from a paper by Joseph Henry - The ABCs of PROC HTTP (https://www.sas.com/content/dam/SAS/support/en/sas-global-forum-proceedings/2019/3232-2019.pdf) The following parameters are used: Parameter Description URL http(s) URL which should be checked in quotes RETURN return code variable (scope should be global) INFO NO/YES indicator to print information to the log smile_url_download \u00b6 Key Description Name smile_url_download Purpose Downloads a file from an URL and store it locally on OUTFILE. Additionally return code can be stored and information can optionally be printed to the log. Comment Return codes are 0 - URL found, 999 - no URL or OUTFILE provided, 998 - URL or OUTFILE not provided in quotes, otherwise html-return code (e.g. 404 file not found) SAS Version SAS 9.4 Author Katja Glass Date 2021-01-04 Reference The idea from this macro is coming from a paper by Joseph Henry - The ABCs of PROC HTTP (https://www.sas.com/content/dam/SAS/support/en/sas-global-forum-proceedings/2019/3232-2019.pdf) The following parameters are used: Parameter Description URL http(s) URL which should be checked in quotes OUTFILE output file provided in quotes RETURN return code variable (scope should be global) INFO NO/YES indicator to print information to the log","title":"Overview"},{"location":"#overview","text":"The following macros are available in the SMILE - Smart SAS Macros - an Intuitive Library Extension. Macro Description smile_attr_var Function-style macro to return a variable attribute of a dataset. The following attributes are available: VARTYPE, VARLEN, VARLABEL, VARFMT and VARINFMT smile_attrc Function-style macro to return a character attribute of a dataset. The following attributes are available: CHARSET, COMPRESS, DATAREP, ENCODING, ENCRYPT, ENGINE, LABEL, LIB, MEM, MODE, MTYPE, SORTEDBY, SORTLVL, SORTSEQ, TYPE smile_attrn Function-style macro to return a numeric attribute of a dataset. The following attributes are available: ALTERPW, ANOBS, ANY, ARAND, ARWU, AUDIT, AUDIT_DATA, AUDIT_BEFORE, AUDIT_ERROR, CRDTE, ICONST, INDEX, ISINDEX, ISSUBSET, LRECL, LRID, MAXGEN, MAXRC, MODTE, NDEL, NEXTGEN, NLOBS, NLOBSF, NOBS, NVARS, PW, RADIX, READPW, REUSE, TAPE, WHSTMT, WRITEPW smile_ods_document_flat_label Flat navigation and optionally re-label navigation for ODS DOCUMENT. The navigation bookmark level is reduced to one level only. Optionally a label can be applied to all content items or the navigation label can be removed completely. smile_pdf_merge Merge multiple PDF files and create one bookmark entry per PDF file with PROC GROOVY and open-source Tool PDFBox smile_pdf_read_bookmarks Read PDF Bookmarks into a SAS dataset with the variables level, title and page smile_url_check Check existence of URL and store result in return code, information can optionally be printed to the log smile_url_download Downloads a file from an URL and store it locally on OUTFILE. Additionally return code can be stored and information can optionally be printed to the log.","title":"Overview"},{"location":"#macros","text":"","title":"Macros"},{"location":"#smile_attr_var","text":"Key Description Name smile_attr_var Purpose Function-style macro to return a variable attribute of a dataset. The following attributes are available: VARTYPE, VARLEN, VARLABEL, VARFMT and VARINFMT SAS Version SAS 9.4 Author Katja Glass Date 2021-01-04 Reference Main programming parts are coming from attrv.sas macro from Roland Rashleigh-Berry who has published his code under the unlicence license in his utility package (http://www.datasavantconsulting.com/roland/Spectre/download.html) The following parameters are used: Parameter Description DATA name of the SAS dataset VAR name of variable ATTRIB SAS variable attrib keyword (e.g. VARTYPE, VARLEN, VARLABEL, VARFMT and VARINFMT)","title":"smile_attr_var"},{"location":"#smile_attrc","text":"Key Description Name smile_attrc Purpose Function-style macro to return a character attribute of a dataset. The following attributes are available: CHARSET, COMPRESS, DATAREP, ENCODING, ENCRYPT, ENGINE, LABEL, LIB, MEM, MODE, MTYPE, SORTEDBY, SORTLVL, SORTSEQ, TYPE SAS Version SAS 9.4 Author Katja Glass Date 2021-01-04 Reference Main programming parts are coming from attrc.sas macro from Roland Rashleigh-Berry who has published his code under the unlicence license in his utility package (http://www.datasavantconsulting.com/roland/Spectre/download.html) The following parameters are used: Parameter Description DATA name of the SAS dataset ATTRIB SAS ATTRC keyword (e.g. TYPE, LIB, LABEL, SORTEDBY, ...)","title":"smile_attrc"},{"location":"#smile_attrn","text":"Key Description Name smile_attrn Purpose Function-style macro to return a numeric attribute of a dataset. The following attributes are available: ALTERPW, ANOBS, ANY, ARAND, ARWU, AUDIT, AUDIT_DATA, AUDIT_BEFORE, AUDIT_ERROR, CRDTE, ICONST, INDEX, ISINDEX, ISSUBSET, LRECL, LRID, MAXGEN, MAXRC, MODTE, NDEL, NEXTGEN, NLOBS, NLOBSF, NOBS, NVARS, PW, RADIX, READPW, REUSE, TAPE, WHSTMT, WRITEPW SAS Version SAS 9.4 Author Katja Glass Date 2021-01-04 Reference Main programming parts are coming from attrn.sas macro from Roland Rashleigh-Berry who has published his code under the unlicence license in his utility package (http://www.datasavantconsulting.com/roland/Spectre/download.html) The following parameters are used: Parameter Description DATA name of the SAS dataset ATTRIB SAS ATTRN keyword (e.g. NOBS, CRDTE, ...)","title":"smile_attrn"},{"location":"#smile_ods_document_flat_label","text":"Key Description Name smile_ods_document_flat_label Purpose Flat navigation and optionally re-label navigation for ODS DOCUMENT. The navigation bookmark level is reduced to one level only. Optionally a label can be applied to all content items or the navigation label can be removed completely. Comment The navigation in PDF documents can be one level only with this macro. CONTENTS=\"\" must be applied to the PROC REPORT as option and additionally for a BREAK BEFORE PAGE option. Issues The table of contents created per default by SAS (ODS PDF option TOC) is not linking the pages correctly when using BY groups and having one ODS DOCUMENT with multiple outputs, using single ODS DOCUMENTS (one per each output) then this is working correctly. In such a case, do use not a TOC or create an own TOC, e.g. like described here: https://www.mwsug.org/proceedings/2012/S1/MWSUG-2012-S125.pdf SAS Version SAS 9.4 Author Katja Glass Date 2021-02-15 Example Program ../programs/test_smile_ods_document_flat_label.sas Reference A nice overview of ODS DOCUMENT can be found here: https://support.sas.com/resources/papers/proceedings12/273-2012.pdf The following parameters are used: Parameter Description DOCUMENT ODS Document item store LABEL One label to apply on first element, all other labels are removed (optional), if not provided, labels are just rearranged and additional BY-labels removed BOOKMARKLABEL Indicator whether to use Bookmark Labels if none is specified (YES Default), if LABEL is missing and BOOKMARKLABEL = NO, all labels are removed","title":"smile_ods_document_flat_label"},{"location":"#smile_pdf_merge","text":"Key Description Name smile_pdf_merge Purpose Merge multiple PDF files and create one bookmark entry per PDF file with PROC GROOVY and open-source Tool PDFBox Comment Make sure to download PDFBOX, e.g. from here https://pdfbox.apache.org/download.html - the full \"app\" version Issues \"unable to resolve class\" messages mean the PDFBOX is not provided correctly. \"ERROR: PROCEDURE GROOVY cannot be used when SAS is in the lock down state.\" means that your SAS environment does not support PROC GROOVY, for this the macro cannot run the groovy code. \"WARNUNG: Removed /IDTree from /Names dictionary, doesn't belong there\" - this message is coming from PDFBox. SAS Version SAS 9.4 Author Katja Glass Date 2021-01-29 Example Program ../programs/test_smile_pdf_merge.sas Reference A paper explaining how to use PDFBOX with PROC GROOVY also for TOC is available in the following paper (https://www.lexjansen.com/phuse/2019/ct/CT05.pdf) The following parameters are used: Parameter Description DATA Input dataset containing INFILE and BOOKMARK variable, INFILE containing single pdf files (one file per observation), BOOKMARK containing the corresponding bookmark label for this file OUTFILE Output PDF file (not in quotes) PDFBOX_JAR_PATH Path and jar file name for PDFBOX open source tool, e.g. &path/pdfbox-app-2.0.22.jar SOURCEFILE Optional SAS program file where PROC GROOVY code is stored, default is TEMP (only temporary) RUN_GROOVY NO/YES indicator whether to run the final GROOVY code (default YES)","title":"smile_pdf_merge"},{"location":"#smile_pdf_read_bookmarks","text":"Key Description Name smile_pdf_read_bookmarks Purpose Read PDF Bookmarks into a SAS dataset with the variables level, title and page Comment Make sure to download PDFBOX, e.g. from here https://pdfbox.apache.org/download.html - the full \"app\" version Issues \"unable to resolve class\" messages mean the PDFBOX is not provided correctly. \"ERROR: PROCEDURE GROOVY cannot be used when SAS is in the lock down state.\" means that your SAS environment does not support PROC GROOVY, for this the macro cannot run the groovy code. SAS Version SAS 9.4 Author Katja Glass Date 2021-02-13 Example Program ../programs/test_smile_pdf_read_bookmarks.sas Reference PDFBox contains a lot of useful functionalities (https://pdfbox.apache.org) The following parameters are used: Parameter Description PDFFILE name of PDF file with bookmarks OUTDAT output dataset PDFBOX_JAR path and jar file name for PDFBOX open source tool, e.g. &path/pdfbox-app-2.0.22.jar","title":"smile_pdf_read_bookmarks"},{"location":"#smile_url_check","text":"Key Description Name smile_url_check Purpose Check existence of URL and store result in return code, information can optionally be printed to the log Comment Return codes are 0 - url found, 999 - no url provided, 998 - url not provided in quotes, otherwise html-return code (e.g. 404 file not found) SAS Version SAS 9.4 Author Katja Glass Date 2021-01-04 Reference The idea from this macro is coming from a paper by Joseph Henry - The ABCs of PROC HTTP (https://www.sas.com/content/dam/SAS/support/en/sas-global-forum-proceedings/2019/3232-2019.pdf) The following parameters are used: Parameter Description URL http(s) URL which should be checked in quotes RETURN return code variable (scope should be global) INFO NO/YES indicator to print information to the log","title":"smile_url_check"},{"location":"#smile_url_download","text":"Key Description Name smile_url_download Purpose Downloads a file from an URL and store it locally on OUTFILE. Additionally return code can be stored and information can optionally be printed to the log. Comment Return codes are 0 - URL found, 999 - no URL or OUTFILE provided, 998 - URL or OUTFILE not provided in quotes, otherwise html-return code (e.g. 404 file not found) SAS Version SAS 9.4 Author Katja Glass Date 2021-01-04 Reference The idea from this macro is coming from a paper by Joseph Henry - The ABCs of PROC HTTP (https://www.sas.com/content/dam/SAS/support/en/sas-global-forum-proceedings/2019/3232-2019.pdf) The following parameters are used: Parameter Description URL http(s) URL which should be checked in quotes OUTFILE output file provided in quotes RETURN return code variable (scope should be global) INFO NO/YES indicator to print information to the log","title":"smile_url_download"},{"location":"smile_attr_var/","text":"Macro SMILE_ATTR_VAR \u00b6 Function-style macro to return a variable attribute of a dataset. The following attributes are available: VARTYPE, VARLEN, VARLABEL, VARFMT and VARINFMT Author: Katja Glass Date: 2021-01-04 SAS Version: SAS 9.4 License: MIT Reference: Main programming parts are coming from attrv.sas macro from Roland Rashleigh-Berry who has published his code under the unlicence license in his utility package (http://www.datasavantconsulting.com/roland/Spectre/download.html) Example Program: test_smile_attr_var Parameters \u00b6 Parameter Description DATA name of the SAS dataset VAR name of variable ATTRIB SAS variable attrib keyword (e.g. VARTYPE, VARLEN, VARLABEL, VARFMT and VARINFMT) Examples \u00b6 %PUT VARTYPE for name: %smile_attr_var(sashelp.class, name, vartype); %PUT VARTYPE for age: %smile_attr_var(sashelp.class, age, vartype); %PUT VARLABEL for name: %smile_attr_var(sashelp.class, name, varlabel); %PUT VARLEN for name: %smile_attr_var(sashelp.class, name, varlen); Checks \u00b6 ATTRIB must contain valid options; Macro \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 %************************************************************************************************************************; %* Project : SMILE - SAS Macros, Intuitive Library Extension %* Macro : smile_attr_var %* Parameters : DATA - name of the SAS dataset %* VAR - name of variable %* ATTRIB - SAS variable attrib keyword (e . g. VARTYPE, VARLEN, VARLABEL, VARFMT and VARINFMT) %* %* Purpose : Function-style macro to return a variable attribute of a dataset. The following attributes are available: %* VARTYPE, VARLEN, VARLABEL, VARFMT and VARINFMT %* %* Author : Katja Glass %* Creation : 2021-01-04 %* License : MIT %* %* Reference : Main programming parts are coming from attrv . sas macro from Roland Rashleigh-Berry who %* has published his code under the unlicence license in his utility package %* (http://www . datasavantconsulting . com/roland/Spectre/download . html) %* %* SAS Version: SAS 9.4 %* %************************************************************************************************************************; /* Examples: %PUT VARTYPE for name: %smile_attr_var(sashelp.class, name, vartype); %PUT VARTYPE for age: %smile_attr_var(sashelp.class, age, vartype); %PUT VARLABEL for name: %smile_attr_var(sashelp.class, name, varlabel); %PUT VARLEN for name: %smile_attr_var(sashelp.class, name, varlen); */ %************************************************************************************************************************; %MACRO smile_attr_var(data, var, attrib ); %LOCAL dsid rc macro varnum; %LET macro = &sysmacroname ; %* check : ATTRIB must contain valid options ; %IF %UPCASE ( &attrib ) NE VARTYPE AND %UPCASE ( &attrib ) NE VARLEN AND %UPCASE ( &attrib ) NE VARLABEL AND %UPCASE ( &attrib ) NE VARFMT AND %UPCASE ( &attrib ) NE VARINFMT %THEN %DO ; %PUT %STR (ERR) OR : &macro - Invalid value for ATTRIB ( &attrib ) - only the following are supported:; %PUT &macro - VARTYPE, VARLEN, VARLABEL, VARFMT and VARINFMT; - 1 %RETURN ; %END ; %* perform action and put value for processing; %LET dsid= %SYSFUNC ( OPEN( &data ,is)); %IF &dsid EQ 0 %THEN %DO ; %PUT %STR (ERR) OR : &macro - DATA ( &data ) does not exist.; - 1 %END ; %ELSE %DO ; %LET varnum = %SYSFUNC ( VARNUM( &dsid , &var )); %IF &varnum LT 1 %THEN %DO ; %PUT %STR (ERR) OR : &macro - Variable VAR ( &var ) does not exist in DATA ( &data ).; - 1 %RETURN ; %END ; %SYSFUNC ( &attrib ( &dsid , &varnum )) %LET rc= %SYSFUNC ( CLOSE( &dsid )); %END ; %MEND smile_attr_var;","title":"smile_attr_var"},{"location":"smile_attr_var/#macro-smile_attr_var","text":"Function-style macro to return a variable attribute of a dataset. The following attributes are available: VARTYPE, VARLEN, VARLABEL, VARFMT and VARINFMT Author: Katja Glass Date: 2021-01-04 SAS Version: SAS 9.4 License: MIT Reference: Main programming parts are coming from attrv.sas macro from Roland Rashleigh-Berry who has published his code under the unlicence license in his utility package (http://www.datasavantconsulting.com/roland/Spectre/download.html) Example Program: test_smile_attr_var","title":"Macro SMILE_ATTR_VAR"},{"location":"smile_attr_var/#parameters","text":"Parameter Description DATA name of the SAS dataset VAR name of variable ATTRIB SAS variable attrib keyword (e.g. VARTYPE, VARLEN, VARLABEL, VARFMT and VARINFMT)","title":"Parameters"},{"location":"smile_attr_var/#examples","text":"%PUT VARTYPE for name: %smile_attr_var(sashelp.class, name, vartype); %PUT VARTYPE for age: %smile_attr_var(sashelp.class, age, vartype); %PUT VARLABEL for name: %smile_attr_var(sashelp.class, name, varlabel); %PUT VARLEN for name: %smile_attr_var(sashelp.class, name, varlen);","title":"Examples"},{"location":"smile_attr_var/#checks","text":"ATTRIB must contain valid options;","title":"Checks"},{"location":"smile_attr_var/#macro","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 %************************************************************************************************************************; %* Project : SMILE - SAS Macros, Intuitive Library Extension %* Macro : smile_attr_var %* Parameters : DATA - name of the SAS dataset %* VAR - name of variable %* ATTRIB - SAS variable attrib keyword (e . g. VARTYPE, VARLEN, VARLABEL, VARFMT and VARINFMT) %* %* Purpose : Function-style macro to return a variable attribute of a dataset. The following attributes are available: %* VARTYPE, VARLEN, VARLABEL, VARFMT and VARINFMT %* %* Author : Katja Glass %* Creation : 2021-01-04 %* License : MIT %* %* Reference : Main programming parts are coming from attrv . sas macro from Roland Rashleigh-Berry who %* has published his code under the unlicence license in his utility package %* (http://www . datasavantconsulting . com/roland/Spectre/download . html) %* %* SAS Version: SAS 9.4 %* %************************************************************************************************************************; /* Examples: %PUT VARTYPE for name: %smile_attr_var(sashelp.class, name, vartype); %PUT VARTYPE for age: %smile_attr_var(sashelp.class, age, vartype); %PUT VARLABEL for name: %smile_attr_var(sashelp.class, name, varlabel); %PUT VARLEN for name: %smile_attr_var(sashelp.class, name, varlen); */ %************************************************************************************************************************; %MACRO smile_attr_var(data, var, attrib ); %LOCAL dsid rc macro varnum; %LET macro = &sysmacroname ; %* check : ATTRIB must contain valid options ; %IF %UPCASE ( &attrib ) NE VARTYPE AND %UPCASE ( &attrib ) NE VARLEN AND %UPCASE ( &attrib ) NE VARLABEL AND %UPCASE ( &attrib ) NE VARFMT AND %UPCASE ( &attrib ) NE VARINFMT %THEN %DO ; %PUT %STR (ERR) OR : &macro - Invalid value for ATTRIB ( &attrib ) - only the following are supported:; %PUT &macro - VARTYPE, VARLEN, VARLABEL, VARFMT and VARINFMT; - 1 %RETURN ; %END ; %* perform action and put value for processing; %LET dsid= %SYSFUNC ( OPEN( &data ,is)); %IF &dsid EQ 0 %THEN %DO ; %PUT %STR (ERR) OR : &macro - DATA ( &data ) does not exist.; - 1 %END ; %ELSE %DO ; %LET varnum = %SYSFUNC ( VARNUM( &dsid , &var )); %IF &varnum LT 1 %THEN %DO ; %PUT %STR (ERR) OR : &macro - Variable VAR ( &var ) does not exist in DATA ( &data ).; - 1 %RETURN ; %END ; %SYSFUNC ( &attrib ( &dsid , &varnum )) %LET rc= %SYSFUNC ( CLOSE( &dsid )); %END ; %MEND smile_attr_var;","title":"Macro"},{"location":"smile_attrc/","text":"Macro SMILE_ATTRC \u00b6 Function-style macro to return a character attribute of a dataset. The following attributes are available: CHARSET, COMPRESS, DATAREP, ENCODING, ENCRYPT, ENGINE, LABEL, LIB, MEM, MODE, MTYPE, SORTEDBY, SORTLVL, SORTSEQ, TYPE Author: Katja Glass Date: 2021-01-04 SAS Version: SAS 9.4 License: MIT Reference: Main programming parts are coming from attrc.sas macro from Roland Rashleigh-Berry who has published his code under the unlicence license in his utility package (http://www.datasavantconsulting.com/roland/Spectre/download.html) Example Program: test_smile_attrc Parameters \u00b6 Parameter Description DATA name of the SAS dataset ATTRIB SAS ATTRC keyword (e.g. TYPE, LIB, LABEL, SORTEDBY, ...) Examples \u00b6 %PUT library of dataset: %smile_attrc(sashelp.class, lib); PROC SORT DATA=sashelp.class OUT=class; BY sex name; RUN; %PUT class is sorted by: %smile_attrc(class, SORTEDBY); %PUT sashelp.class is sorted by: %smile_attrc(sashelp.class, SORTEDBY); Checks \u00b6 ATTRIB must contain valid options; Macro \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 %************************************************************************************************************************; %* Project : SMILE - SAS Macros, Intuitive Library Extension %* Macro : smile_attrc %* Parameters : DATA - name of the SAS dataset %* ATTRIB - SAS ATTRC keyword (e . g. TYPE, LIB, LABEL , SORTEDBY, ...) %* %* Purpose : Function-style macro to return a character attribute of a dataset. The following attributes are available: %* CHARSET, COMPRESS, DATAREP, ENCODING, ENCRYPT, ENGINE, LABEL , LIB, MEM, MODE, MTYPE, SORTEDBY, SORTLVL, %* SORTSEQ, TYPE %* %* Author : Katja Glass %* Creation : 2021-01-04 %* License : MIT %* %* Reference : Main programming parts are coming from attrc . sas macro from Roland Rashleigh-Berry who %* has published his code under the unlicence license in his utility package %* (http://www . datasavantconsulting . com/roland/Spectre/download . html) %* %* SAS Version: SAS 9.4 %* %************************************************************************************************************************; /* Examples: %PUT library of dataset: %smile_attrc(sashelp.class, lib); PROC SORT DATA=sashelp.class OUT=class; BY sex name; RUN; %PUT class is sorted by: %smile_attrc(class, SORTEDBY); %PUT sashelp.class is sorted by: %smile_attrc(sashelp.class, SORTEDBY); */ %************************************************************************************************************************; %MACRO smile_attrc(data, attrib ) / MINOPERATOR MINDELIMITER= ',' ; %LOCAL dsid rc macro; %LET macro = &sysmacroname ; %* check : ATTRIB must contain valid options ; %IF NOT ( %UPCASE ( &attrib ) IN (CHARSET,COMPRESS,DATAREP,ENCODING,ENCRYPT,ENGINE, LABEL ,LIB,MEM,MODE,MTYPE, SORTEDBY,SORTLVL,SORTSEQ,TYPE)) %THEN %DO ; %PUT %STR (ERR) OR : &macro - Invalid value for ATTRIB ( &attrib ).; - 1 %RETURN ; %END ; %* perform action and put value for processing; %LET dsid= %SYSFUNC ( OPEN( &data ,is)); %IF &dsid EQ 0 %THEN %DO ; %PUT %STR (ERR) OR : &macro - DATA ( &data ) does not exist.; - 1 %END ; %ELSE %DO ; %SYSFUNC ( attrc( &dsid , &attrib )) %LET rc= %SYSFUNC ( CLOSE( &dsid )); %END ; %MEND smile_attrc;","title":"smile_attrc"},{"location":"smile_attrc/#macro-smile_attrc","text":"Function-style macro to return a character attribute of a dataset. The following attributes are available: CHARSET, COMPRESS, DATAREP, ENCODING, ENCRYPT, ENGINE, LABEL, LIB, MEM, MODE, MTYPE, SORTEDBY, SORTLVL, SORTSEQ, TYPE Author: Katja Glass Date: 2021-01-04 SAS Version: SAS 9.4 License: MIT Reference: Main programming parts are coming from attrc.sas macro from Roland Rashleigh-Berry who has published his code under the unlicence license in his utility package (http://www.datasavantconsulting.com/roland/Spectre/download.html) Example Program: test_smile_attrc","title":"Macro SMILE_ATTRC"},{"location":"smile_attrc/#parameters","text":"Parameter Description DATA name of the SAS dataset ATTRIB SAS ATTRC keyword (e.g. TYPE, LIB, LABEL, SORTEDBY, ...)","title":"Parameters"},{"location":"smile_attrc/#examples","text":"%PUT library of dataset: %smile_attrc(sashelp.class, lib); PROC SORT DATA=sashelp.class OUT=class; BY sex name; RUN; %PUT class is sorted by: %smile_attrc(class, SORTEDBY); %PUT sashelp.class is sorted by: %smile_attrc(sashelp.class, SORTEDBY);","title":"Examples"},{"location":"smile_attrc/#checks","text":"ATTRIB must contain valid options;","title":"Checks"},{"location":"smile_attrc/#macro","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 %************************************************************************************************************************; %* Project : SMILE - SAS Macros, Intuitive Library Extension %* Macro : smile_attrc %* Parameters : DATA - name of the SAS dataset %* ATTRIB - SAS ATTRC keyword (e . g. TYPE, LIB, LABEL , SORTEDBY, ...) %* %* Purpose : Function-style macro to return a character attribute of a dataset. The following attributes are available: %* CHARSET, COMPRESS, DATAREP, ENCODING, ENCRYPT, ENGINE, LABEL , LIB, MEM, MODE, MTYPE, SORTEDBY, SORTLVL, %* SORTSEQ, TYPE %* %* Author : Katja Glass %* Creation : 2021-01-04 %* License : MIT %* %* Reference : Main programming parts are coming from attrc . sas macro from Roland Rashleigh-Berry who %* has published his code under the unlicence license in his utility package %* (http://www . datasavantconsulting . com/roland/Spectre/download . html) %* %* SAS Version: SAS 9.4 %* %************************************************************************************************************************; /* Examples: %PUT library of dataset: %smile_attrc(sashelp.class, lib); PROC SORT DATA=sashelp.class OUT=class; BY sex name; RUN; %PUT class is sorted by: %smile_attrc(class, SORTEDBY); %PUT sashelp.class is sorted by: %smile_attrc(sashelp.class, SORTEDBY); */ %************************************************************************************************************************; %MACRO smile_attrc(data, attrib ) / MINOPERATOR MINDELIMITER= ',' ; %LOCAL dsid rc macro; %LET macro = &sysmacroname ; %* check : ATTRIB must contain valid options ; %IF NOT ( %UPCASE ( &attrib ) IN (CHARSET,COMPRESS,DATAREP,ENCODING,ENCRYPT,ENGINE, LABEL ,LIB,MEM,MODE,MTYPE, SORTEDBY,SORTLVL,SORTSEQ,TYPE)) %THEN %DO ; %PUT %STR (ERR) OR : &macro - Invalid value for ATTRIB ( &attrib ).; - 1 %RETURN ; %END ; %* perform action and put value for processing; %LET dsid= %SYSFUNC ( OPEN( &data ,is)); %IF &dsid EQ 0 %THEN %DO ; %PUT %STR (ERR) OR : &macro - DATA ( &data ) does not exist.; - 1 %END ; %ELSE %DO ; %SYSFUNC ( attrc( &dsid , &attrib )) %LET rc= %SYSFUNC ( CLOSE( &dsid )); %END ; %MEND smile_attrc;","title":"Macro"},{"location":"smile_attrn/","text":"Macro SMILE_ATTRN \u00b6 Function-style macro to return a numeric attribute of a dataset. The following attributes are available: ALTERPW, ANOBS, ANY, ARAND, ARWU, AUDIT, AUDIT_DATA, AUDIT_BEFORE, AUDIT_ERROR, CRDTE, ICONST, INDEX, ISINDEX, ISSUBSET, LRECL, LRID, MAXGEN, MAXRC, MODTE, NDEL, NEXTGEN, NLOBS, NLOBSF, NOBS, NVARS, PW, RADIX, READPW, REUSE, TAPE, WHSTMT, WRITEPW Author: Katja Glass Date: 2021-01-04 SAS Version: SAS 9.4 License: MIT Reference: Main programming parts are coming from attrn.sas macro from Roland Rashleigh-Berry who has published his code under the unlicence license in his utility package (http://www.datasavantconsulting.com/roland/Spectre/download.html) Example Program: test_smile_attrn Parameters \u00b6 Parameter Description DATA name of the SAS dataset ATTRIB SAS ATTRN keyword (e.g. NOBS, CRDTE, ...) Examples \u00b6 %PUT Number of observations: %smile_attrn(sashelp.class, nobs); %IF %smile_attrn(sashelp.class, nvars) > 0 %THEN %PUT Dataset has variables; Checks \u00b6 ATTRIB must contain valid options; Macro \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 %************************************************************************************************************************; %* Project : SMILE - SAS Macros, Intuitive Library Extension %* Macro : smile_attrn %* Parameters : DATA - name of the SAS dataset %* ATTRIB - SAS ATTRN keyword (e . g. NOBS, CRDTE, ...) %* %* Purpose : Function-style macro to return a numeric attribute of a dataset. The following attributes are available: %* ALTERPW, ANOBS, ANY, ARAND, ARWU, AUDIT, AUDIT_DATA, AUDIT_BEFORE, AUDIT_ERROR, CRDTE, ICONST, INDEX , %* ISINDEX, ISSUBSET, LRECL, LRID, MAXGEN, MAXRC, MODTE, NDEL, NEXTGEN, NLOBS, NLOBSF, NOBS, NVARS, PW, RADIX, %* READPW, REUSE, TAPE, WHSTMT, WRITEPW %* %* Author : Katja Glass %* Creation : 2021-01-04 %* License : MIT %* %* Reference : Main programming parts are coming from attrn . sas macro from Roland Rashleigh-Berry who %* has published his code under the unlicence license in his utility package %* (http://www . datasavantconsulting . com/roland/Spectre/download . html) %* %* SAS Version: SAS 9.4 %* %************************************************************************************************************************; /* Examples: %PUT Number of observations: %smile_attrn(sashelp.class, nobs); %IF %smile_attrn(sashelp.class, nvars) > 0 %THEN %PUT Dataset has variables; */ %************************************************************************************************************************; %MACRO smile_attrn(data, attrib ) / MINOPERATOR MINDELIMITER= ',' ; %LOCAL dsid rc macro; %LET macro = &sysmacroname ; %* check : ATTRIB must contain valid options ; %IF NOT ( %UPCASE ( &attrib ) IN (ALTERPW,ANOBS,ANY,ARAND,ARWU,AUDIT,AUDIT_DATA,AUDIT_BEFORE,AUDIT_ERROR,CRDTE,ICONST, INDEX , ISINDEX,ISSUBSET,LRECL,LRID,MAXGEN,MAXRC,MODTE,NDEL,NEXTGEN,NLOBS,NLOBSF,NOBS,NVARS,PW,RADIX, READPW,REUSE,TAPE,WHSTMT,WRITEPW)) %THEN %DO ; %PUT %STR (ERR) OR : &macro - Invalid value for ATTRIB ( &attrib ).; - 1 %RETURN ; %END ; %* perform action and put value for processing; %LET dsid= %SYSFUNC ( OPEN( &data ,is)); %IF &dsid EQ 0 %THEN %DO ; %PUT %STR (ERR) OR : &macro - DATA ( &data ) does not exist.; - 1 %END ; %ELSE %DO ; %SYSFUNC ( attrn( &dsid , &attrib )) %LET rc= %SYSFUNC ( CLOSE( &dsid )); %END ; %MEND smile_attrn;","title":"smile_attrn"},{"location":"smile_attrn/#macro-smile_attrn","text":"Function-style macro to return a numeric attribute of a dataset. The following attributes are available: ALTERPW, ANOBS, ANY, ARAND, ARWU, AUDIT, AUDIT_DATA, AUDIT_BEFORE, AUDIT_ERROR, CRDTE, ICONST, INDEX, ISINDEX, ISSUBSET, LRECL, LRID, MAXGEN, MAXRC, MODTE, NDEL, NEXTGEN, NLOBS, NLOBSF, NOBS, NVARS, PW, RADIX, READPW, REUSE, TAPE, WHSTMT, WRITEPW Author: Katja Glass Date: 2021-01-04 SAS Version: SAS 9.4 License: MIT Reference: Main programming parts are coming from attrn.sas macro from Roland Rashleigh-Berry who has published his code under the unlicence license in his utility package (http://www.datasavantconsulting.com/roland/Spectre/download.html) Example Program: test_smile_attrn","title":"Macro SMILE_ATTRN"},{"location":"smile_attrn/#parameters","text":"Parameter Description DATA name of the SAS dataset ATTRIB SAS ATTRN keyword (e.g. NOBS, CRDTE, ...)","title":"Parameters"},{"location":"smile_attrn/#examples","text":"%PUT Number of observations: %smile_attrn(sashelp.class, nobs); %IF %smile_attrn(sashelp.class, nvars) > 0 %THEN %PUT Dataset has variables;","title":"Examples"},{"location":"smile_attrn/#checks","text":"ATTRIB must contain valid options;","title":"Checks"},{"location":"smile_attrn/#macro","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 %************************************************************************************************************************; %* Project : SMILE - SAS Macros, Intuitive Library Extension %* Macro : smile_attrn %* Parameters : DATA - name of the SAS dataset %* ATTRIB - SAS ATTRN keyword (e . g. NOBS, CRDTE, ...) %* %* Purpose : Function-style macro to return a numeric attribute of a dataset. The following attributes are available: %* ALTERPW, ANOBS, ANY, ARAND, ARWU, AUDIT, AUDIT_DATA, AUDIT_BEFORE, AUDIT_ERROR, CRDTE, ICONST, INDEX , %* ISINDEX, ISSUBSET, LRECL, LRID, MAXGEN, MAXRC, MODTE, NDEL, NEXTGEN, NLOBS, NLOBSF, NOBS, NVARS, PW, RADIX, %* READPW, REUSE, TAPE, WHSTMT, WRITEPW %* %* Author : Katja Glass %* Creation : 2021-01-04 %* License : MIT %* %* Reference : Main programming parts are coming from attrn . sas macro from Roland Rashleigh-Berry who %* has published his code under the unlicence license in his utility package %* (http://www . datasavantconsulting . com/roland/Spectre/download . html) %* %* SAS Version: SAS 9.4 %* %************************************************************************************************************************; /* Examples: %PUT Number of observations: %smile_attrn(sashelp.class, nobs); %IF %smile_attrn(sashelp.class, nvars) > 0 %THEN %PUT Dataset has variables; */ %************************************************************************************************************************; %MACRO smile_attrn(data, attrib ) / MINOPERATOR MINDELIMITER= ',' ; %LOCAL dsid rc macro; %LET macro = &sysmacroname ; %* check : ATTRIB must contain valid options ; %IF NOT ( %UPCASE ( &attrib ) IN (ALTERPW,ANOBS,ANY,ARAND,ARWU,AUDIT,AUDIT_DATA,AUDIT_BEFORE,AUDIT_ERROR,CRDTE,ICONST, INDEX , ISINDEX,ISSUBSET,LRECL,LRID,MAXGEN,MAXRC,MODTE,NDEL,NEXTGEN,NLOBS,NLOBSF,NOBS,NVARS,PW,RADIX, READPW,REUSE,TAPE,WHSTMT,WRITEPW)) %THEN %DO ; %PUT %STR (ERR) OR : &macro - Invalid value for ATTRIB ( &attrib ).; - 1 %RETURN ; %END ; %* perform action and put value for processing; %LET dsid= %SYSFUNC ( OPEN( &data ,is)); %IF &dsid EQ 0 %THEN %DO ; %PUT %STR (ERR) OR : &macro - DATA ( &data ) does not exist.; - 1 %END ; %ELSE %DO ; %SYSFUNC ( attrn( &dsid , &attrib )) %LET rc= %SYSFUNC ( CLOSE( &dsid )); %END ; %MEND smile_attrn;","title":"Macro"},{"location":"smile_ods_document_flat_label/","text":"Macro SMILE_ODS_DOCUMENT_FLAT_LABEL \u00b6 Flat navigation and optionally re-label navigation for ODS DOCUMENT. The navigation bookmark level is reduced to one level only. Optionally a label can be applied to all content items or the navigation label can be removed completely. Author: Katja Glass Date: 2021-02-15 SAS Version: SAS 9.4 License: MIT Comment: The navigation in PDF documents can be one level only with this macro. CONTENTS=\"\" must be applied to the PROC REPORT as option and additionally for a BREAK BEFORE PAGE option. Issues: The table of contents created per default by SAS (ODS PDF option TOC) is not linking the pages correctly when using BY groups and having one ODS DOCUMENT with multiple outputs, using single ODS DOCUMENTS (one per each output) then this is working correctly. In such a case, do use not a TOC or create an own TOC, e.g. like described here: https://www.mwsug.org/proceedings/2012/S1/MWSUG-2012-S125.pdf Reference: A nice overview of ODS DOCUMENT can be found here: https://support.sas.com/resources/papers/proceedings12/273-2012.pdf Example Program: test_smile_ods_document_flat_label Parameters \u00b6 Parameter Description DOCUMENT ODS Document item store LABEL One label to apply on first element, all other labels are removed (optional), if not provided, labels are just rearranged and additional BY-labels removed BOOKMARKLABEL Indicator whether to use Bookmark Labels if none is specified (YES Default), if LABEL is missing and BOOKMARKLABEL = NO, all labels are removed Examples \u00b6 %*This will flatten the navigation and use the labels originally set with ODS PROCLABEL; %smile_ods_document_flat_label(document=doc_reports); %*This will flatten the navigation and use the label \"Table 1.1.1\" applied to all items of this store; %smile_ods_document_flat_label(document=doc_report1, label=Table 1.1.1); %*This will flatten the navigation and use no navigation label at all (no navigation link at all for these items); %smile_ods_document_flat_label(document=doc_report1, label=, bookmarklabel = NO); Checks \u00b6 DOCUMENT must be specified; BOOKMARKLABEL must be YES or NO; DOCUMENT must contain content; Macro \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 %************************************************************************************************************************; %* Project : SMILE - SAS Macros, Intuitive Library Extension %* Macro : smile_ods_document_flat_label %* Parameters : DOCUMENT - ODS Document item store %* LABEL - One label to apply on first element, all other labels are removed (optional), %* if not provided, labels are just rearranged and additional BY -labels removed %* BOOKMARKLABEL - Indicator whether to use Bookmark Labels if none is specified (YES Default), %* if LABEL is missing and BOOKMARKLABEL = NO, all labels are removed %* %* Purpose : Flat navigation and optionally re- label navigation for ODS DOCUMENT. The navigation bookmark level is %* reduced to one level only. Optionally a label can be applied to all content items or the navigation label %* can be removed completely. %* Comment : The navigation in PDF documents can be one level only with this macro. CONTENTS= \"\" must be applied to %* the PROC REPORT as option and additionally for a BREAK BEFORE PAGE option. %* Issues : The table of contents created per default by SAS (ODS PDF option TOC) is not linking the pages correctly when %* using BY groups and having one ODS DOCUMENT with multiple outputs, using single ODS DOCUMENTS (one per each output ) %* then this is working correctly. In such a case, do use not a TOC or create an own TOC, e . g. like described here: %* https://www . mwsug . org/proceedings/ 2012 /S1/MWSUG -2012 -S125 . pdf %* %* ExampleProg: ../programs/test_smile_ods_document_flat_label . sas %* %* Author : Katja Glass %* Creation : 2021-02-15 %* License : MIT %* %* Reference : A nice overview of ODS DOCUMENT can be found here: https://support . sas . com/resources/papers/proceedings12/ 273-2012. pdf %* %* SAS Version: SAS 9.4 %* %************************************************************************************************************************; /* Examples: %*This will flatten the navigation and use the labels originally set with ODS PROCLABEL; %smile_ods_document_flat_label(document=doc_reports); %*This will flatten the navigation and use the label \"Table 1.1.1\" applied to all items of this store; %smile_ods_document_flat_label(document=doc_report1, label=Table 1.1.1); %*This will flatten the navigation and use no navigation label at all (no navigation link at all for these items); %smile_ods_document_flat_label(document=doc_report1, label=, bookmarklabel = NO); */ %************************************************************************************************************************; %MACRO smile_ods_document_flat_label(document=, label =, bookmarkLabel = yes); %LOCAL macro _temp; %LET macro = &sysmacroname ; %LET _temp = - 1 ; %*; %* Error handling I; %*; %* check : DOCUMENT must be specified; %IF %LENGTH ( &document ) = 0 %THEN %DO ; %PUT %STR (ERR) OR : &macro - DOCUMENT parameter is required. Macro will abort ; %RETURN ; %END ; %* check : BOOKMARKLABEL must be YES or NO; %IF %UPCASE ( &bookmarkLabel ) NE YES AND %UPCASE ( &bookmarkLabel ) NE NO %THEN %DO ; %PUT %STR (ERR) OR : &macro - BOOKMARKLABEL parameter must either be NO or YES. Macro will abort ; %RETURN ; %END ; %* check - DOCUMENT must be an existing item store in WORK ; PROC SQL NOPRINT; SELECT 1 INTO :_temp FROM SASHELP . VMEMBER WHERE libname = \"WORK\" AND memname= \"%UPCASE( &document )\" AND memtype = \"ITEMSTOR\" ; RUN; QUIT; %IF &_temp NE 1 %THEN %DO ; %PUT %STR (ERR) OR : &macro - DOCUMENT ( &document ) is no existing ODS DOCUMENT. Macro will abort ; %RETURN ; %END ; %*; %* Read information; %*; ODS SELECT NONE ; PROC DOCUMENT NAME = &document ; LIST / DETAILS LEVELS=all; ODS OUTPUT PROPERTIES = _props ; RUN; QUIT; ODS SELECT ALL; %*; %* Error handling II; %*; %* check : DOCUMENT must contain content; %LET _temp = - 1 ; PROC SQL NOPRINT; SELECT nobs INTO :_temp FROM SASHELP . VTABLE WHERE libname = \"WORK\" AND memname= \"_PROPS\" ; RUN; QUIT; %IF &_temp = 0 %THEN %DO ; %PUT %STR (WAR)NING: &macro - DOCUMENT ( &document ) does not contain any observations - no action done; %RETURN ; %END ; %*; %* Processing; %*; %* create a generic processing for PROC DOCUMENT; %* Step 1 : move all reports to /all and apply label ; DATA _NULL_ ; SET _props END =_eof; ATTRIB coreLabel FORMAT =$ 200 .; RETAIN coreLabel; RETAIN _count 1 _first 0 _core 0 ; IF _N_ = 1 THEN DO ; CALL EXECUTE( \"PROC DOCUMENT NAME= &document ;\" ); END ; IF COUNT(path, \" \\\" ) = 1 AND type = \" Dir \" THEN DO; _core = 1; %IF %UPCASE( &bookmarkLabel ) NE YES %THEN %DO; CALL MISSING(coreLabel); PUT \" updateOdsDocument - No label is used \"; %END; %ELSE %IF %LENGTH(\" &label \") > 2 %THEN %DO; coreLabel = \" &label \"; %END; %ELSE %DO; coreLabel = label; _first = 0; %END; END; IF type NE \" Dir \" AND _core THEN DO; CALL EXECUTE('MOVE ' || STRIP(path) || ' to \\all;'); IF _first = 0 THEN CALL EXECUTE('SETLABEL \\all#' || STRIP(PUT(_count,BEST.)) || \" '\" || STRIP(coreLabel) || \"' ; \"); _first = 1; _count = _count + 1; END; IF _eof THEN DO; CALL EXECUTE('RUN;QUIT;'); END; RUN; %* Step 2: remove all old hierarchies; DATA _NULL_; SET _props END=_eof; IF _N_ = 1 THEN CALL EXECUTE(\" PROC DOCUMENT NAME= &document ; \"); IF COUNT(path,\" \\ \") = 1 AND type = \" Dir \" THEN CALL EXECUTE('DELETE ' || STRIP(path) || \" ; \"); IF _eof THEN CALL EXECUTE('RUN;QUIT;'); RUN; %*; %* Cleanup; %*; PROC DATASETS LIB=WORK; DELETE _props; RUN; %MEND smile_ods_document_flat_label;","title":"smile_ods_document_flat_label"},{"location":"smile_ods_document_flat_label/#macro-smile_ods_document_flat_label","text":"Flat navigation and optionally re-label navigation for ODS DOCUMENT. The navigation bookmark level is reduced to one level only. Optionally a label can be applied to all content items or the navigation label can be removed completely. Author: Katja Glass Date: 2021-02-15 SAS Version: SAS 9.4 License: MIT Comment: The navigation in PDF documents can be one level only with this macro. CONTENTS=\"\" must be applied to the PROC REPORT as option and additionally for a BREAK BEFORE PAGE option. Issues: The table of contents created per default by SAS (ODS PDF option TOC) is not linking the pages correctly when using BY groups and having one ODS DOCUMENT with multiple outputs, using single ODS DOCUMENTS (one per each output) then this is working correctly. In such a case, do use not a TOC or create an own TOC, e.g. like described here: https://www.mwsug.org/proceedings/2012/S1/MWSUG-2012-S125.pdf Reference: A nice overview of ODS DOCUMENT can be found here: https://support.sas.com/resources/papers/proceedings12/273-2012.pdf Example Program: test_smile_ods_document_flat_label","title":"Macro SMILE_ODS_DOCUMENT_FLAT_LABEL"},{"location":"smile_ods_document_flat_label/#parameters","text":"Parameter Description DOCUMENT ODS Document item store LABEL One label to apply on first element, all other labels are removed (optional), if not provided, labels are just rearranged and additional BY-labels removed BOOKMARKLABEL Indicator whether to use Bookmark Labels if none is specified (YES Default), if LABEL is missing and BOOKMARKLABEL = NO, all labels are removed","title":"Parameters"},{"location":"smile_ods_document_flat_label/#examples","text":"%*This will flatten the navigation and use the labels originally set with ODS PROCLABEL; %smile_ods_document_flat_label(document=doc_reports); %*This will flatten the navigation and use the label \"Table 1.1.1\" applied to all items of this store; %smile_ods_document_flat_label(document=doc_report1, label=Table 1.1.1); %*This will flatten the navigation and use no navigation label at all (no navigation link at all for these items); %smile_ods_document_flat_label(document=doc_report1, label=, bookmarklabel = NO);","title":"Examples"},{"location":"smile_ods_document_flat_label/#checks","text":"DOCUMENT must be specified; BOOKMARKLABEL must be YES or NO; DOCUMENT must contain content;","title":"Checks"},{"location":"smile_ods_document_flat_label/#macro","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 %************************************************************************************************************************; %* Project : SMILE - SAS Macros, Intuitive Library Extension %* Macro : smile_ods_document_flat_label %* Parameters : DOCUMENT - ODS Document item store %* LABEL - One label to apply on first element, all other labels are removed (optional), %* if not provided, labels are just rearranged and additional BY -labels removed %* BOOKMARKLABEL - Indicator whether to use Bookmark Labels if none is specified (YES Default), %* if LABEL is missing and BOOKMARKLABEL = NO, all labels are removed %* %* Purpose : Flat navigation and optionally re- label navigation for ODS DOCUMENT. The navigation bookmark level is %* reduced to one level only. Optionally a label can be applied to all content items or the navigation label %* can be removed completely. %* Comment : The navigation in PDF documents can be one level only with this macro. CONTENTS= \"\" must be applied to %* the PROC REPORT as option and additionally for a BREAK BEFORE PAGE option. %* Issues : The table of contents created per default by SAS (ODS PDF option TOC) is not linking the pages correctly when %* using BY groups and having one ODS DOCUMENT with multiple outputs, using single ODS DOCUMENTS (one per each output ) %* then this is working correctly. In such a case, do use not a TOC or create an own TOC, e . g. like described here: %* https://www . mwsug . org/proceedings/ 2012 /S1/MWSUG -2012 -S125 . pdf %* %* ExampleProg: ../programs/test_smile_ods_document_flat_label . sas %* %* Author : Katja Glass %* Creation : 2021-02-15 %* License : MIT %* %* Reference : A nice overview of ODS DOCUMENT can be found here: https://support . sas . com/resources/papers/proceedings12/ 273-2012. pdf %* %* SAS Version: SAS 9.4 %* %************************************************************************************************************************; /* Examples: %*This will flatten the navigation and use the labels originally set with ODS PROCLABEL; %smile_ods_document_flat_label(document=doc_reports); %*This will flatten the navigation and use the label \"Table 1.1.1\" applied to all items of this store; %smile_ods_document_flat_label(document=doc_report1, label=Table 1.1.1); %*This will flatten the navigation and use no navigation label at all (no navigation link at all for these items); %smile_ods_document_flat_label(document=doc_report1, label=, bookmarklabel = NO); */ %************************************************************************************************************************; %MACRO smile_ods_document_flat_label(document=, label =, bookmarkLabel = yes); %LOCAL macro _temp; %LET macro = &sysmacroname ; %LET _temp = - 1 ; %*; %* Error handling I; %*; %* check : DOCUMENT must be specified; %IF %LENGTH ( &document ) = 0 %THEN %DO ; %PUT %STR (ERR) OR : &macro - DOCUMENT parameter is required. Macro will abort ; %RETURN ; %END ; %* check : BOOKMARKLABEL must be YES or NO; %IF %UPCASE ( &bookmarkLabel ) NE YES AND %UPCASE ( &bookmarkLabel ) NE NO %THEN %DO ; %PUT %STR (ERR) OR : &macro - BOOKMARKLABEL parameter must either be NO or YES. Macro will abort ; %RETURN ; %END ; %* check - DOCUMENT must be an existing item store in WORK ; PROC SQL NOPRINT; SELECT 1 INTO :_temp FROM SASHELP . VMEMBER WHERE libname = \"WORK\" AND memname= \"%UPCASE( &document )\" AND memtype = \"ITEMSTOR\" ; RUN; QUIT; %IF &_temp NE 1 %THEN %DO ; %PUT %STR (ERR) OR : &macro - DOCUMENT ( &document ) is no existing ODS DOCUMENT. Macro will abort ; %RETURN ; %END ; %*; %* Read information; %*; ODS SELECT NONE ; PROC DOCUMENT NAME = &document ; LIST / DETAILS LEVELS=all; ODS OUTPUT PROPERTIES = _props ; RUN; QUIT; ODS SELECT ALL; %*; %* Error handling II; %*; %* check : DOCUMENT must contain content; %LET _temp = - 1 ; PROC SQL NOPRINT; SELECT nobs INTO :_temp FROM SASHELP . VTABLE WHERE libname = \"WORK\" AND memname= \"_PROPS\" ; RUN; QUIT; %IF &_temp = 0 %THEN %DO ; %PUT %STR (WAR)NING: &macro - DOCUMENT ( &document ) does not contain any observations - no action done; %RETURN ; %END ; %*; %* Processing; %*; %* create a generic processing for PROC DOCUMENT; %* Step 1 : move all reports to /all and apply label ; DATA _NULL_ ; SET _props END =_eof; ATTRIB coreLabel FORMAT =$ 200 .; RETAIN coreLabel; RETAIN _count 1 _first 0 _core 0 ; IF _N_ = 1 THEN DO ; CALL EXECUTE( \"PROC DOCUMENT NAME= &document ;\" ); END ; IF COUNT(path, \" \\\" ) = 1 AND type = \" Dir \" THEN DO; _core = 1; %IF %UPCASE( &bookmarkLabel ) NE YES %THEN %DO; CALL MISSING(coreLabel); PUT \" updateOdsDocument - No label is used \"; %END; %ELSE %IF %LENGTH(\" &label \") > 2 %THEN %DO; coreLabel = \" &label \"; %END; %ELSE %DO; coreLabel = label; _first = 0; %END; END; IF type NE \" Dir \" AND _core THEN DO; CALL EXECUTE('MOVE ' || STRIP(path) || ' to \\all;'); IF _first = 0 THEN CALL EXECUTE('SETLABEL \\all#' || STRIP(PUT(_count,BEST.)) || \" '\" || STRIP(coreLabel) || \"' ; \"); _first = 1; _count = _count + 1; END; IF _eof THEN DO; CALL EXECUTE('RUN;QUIT;'); END; RUN; %* Step 2: remove all old hierarchies; DATA _NULL_; SET _props END=_eof; IF _N_ = 1 THEN CALL EXECUTE(\" PROC DOCUMENT NAME= &document ; \"); IF COUNT(path,\" \\ \") = 1 AND type = \" Dir \" THEN CALL EXECUTE('DELETE ' || STRIP(path) || \" ; \"); IF _eof THEN CALL EXECUTE('RUN;QUIT;'); RUN; %*; %* Cleanup; %*; PROC DATASETS LIB=WORK; DELETE _props; RUN; %MEND smile_ods_document_flat_label;","title":"Macro"},{"location":"smile_pdf_merge/","text":"Macro SMILE_PDF_MERGE \u00b6 Merge multiple PDF files and create one bookmark entry per PDF file with PROC GROOVY and open-source Tool PDFBox Author: Katja Glass Date: 2021-01-29 SAS Version: SAS 9.4 License: MIT Comment: Make sure to download PDFBOX, e.g. from here https://pdfbox.apache.org/download.html - the full \"app\" version Issues: \"unable to resolve class\" messages mean the PDFBOX is not provided correctly. \"ERROR: PROCEDURE GROOVY cannot be used when SAS is in the lock down state.\" means that your SAS environment does not support PROC GROOVY, for this the macro cannot run the groovy code. \"WARNUNG: Removed /IDTree from /Names dictionary, doesn't belong there\" - this message is coming from PDFBox. Reference: A paper explaining how to use PDFBOX with PROC GROOVY also for TOC is available in the following paper (https://www.lexjansen.com/phuse/2019/ct/CT05.pdf) Example Program: test_smile_pdf_merge Parameters \u00b6 Parameter Description DATA Input dataset containing INFILE and BOOKMARK variable, INFILE containing single pdf files (one file per observation), BOOKMARK containing the corresponding bookmark label for this file OUTFILE Output PDF file (not in quotes) PDFBOX_JAR_PATH Path and jar file name for PDFBOX open source tool, e.g. &path/pdfbox-app-2.0.22.jar SOURCEFILE Optional SAS program file where PROC GROOVY code is stored, default is TEMP (only temporary) RUN_GROOVY NO/YES indicator whether to run the final GROOVY code (default YES) Examples \u00b6 DATA content; ATTRIB inFile FORMAT=$255.; ATTRIB bookmark FORMAT=$255.; inFile = \"&inPath/output_1.pdf\"; bookmark = \"Table 1\"; OUTPUT; inFile = \"&inPath/output_2.pdf\"; bookmark = \"Table 2\"; OUTPUT; inFile = \"&inPath/output_3.pdf\"; bookmark = \"Table 3\"; OUTPUT; RUN; %smile_pdf_merge( data = content , outfile = &outPath/merged_output.pdf , pdfbox_jar_path = &libPath/pdfbox-app-2.0.22.jar , sourcefile = &progPath/groovy_call.sas , run_groovy = YES ); Checks \u00b6 existence of required parameters (DATA, OUTFILE, PDFBOX_JAR_PATH), abort; existence of parameter SOURCEFILE, if not use TEMP; RUN_GROOVY must be NO or YES, abort; PDFBOX_JAR_PATH must exist and must be a \".jar\" file; existence of data, contains observations, contains variables infile and bookmark; files in variable \"infile\" must exist; Macro \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 %************************************************************************************************************************; %* Project : SMILE - SAS Macros, Intuitive Library Extension %* Macro : smile_pdf_merge %* Parameters : DATA - Input dataset containing INFILE and BOOKMARK variable, %* INFILE containing single pdf files (one file per observation), %* BOOKMARK containing the corresponding bookmark label for this file %* OUTFILE - Output PDF file ( not in quotes) %* PDFBOX_JAR_PATH - Path and jar file name for PDFBOX open source tool, e . g. &path /pdfbox-app -2.0.22. jar %* SOURCEFILE - Optional SAS program file where PROC GROOVY code is stored, default is TEMP (only temporary) %* RUN_GROOVY - NO/YES indicator whether to run the final GROOVY code (default YES) %* %* Purpose : Merge multiple PDF files and create one bookmark entry per PDF file with PROC GROOVY and open-source Tool PDFBox %* Comment : Make sure to download PDFBOX, e . g. from here https://pdfbox . apache . org/download . html - the full \"app\" version %* Issues : \"unable to resolve class\" messages mean the PDFBOX is not provided correctly. %* \"ERROR: PROCEDURE GROOVY cannot be used when SAS is in the lock down state.\" means that your SAS environment %* does not support PROC GROOVY, for this the macro cannot run the groovy code. %* \"WARNUNG: Removed /IDTree from /Names dictionary, doesn't belong there\" - this message is coming from PDFBox. %* %* ExampleProg: ../programs/test_smile_pdf_merge . sas %* %* Author : Katja Glass %* Creation : 2021-01-29 %* License : MIT %* %* Reference : A paper explaining how to use PDFBOX with PROC GROOVY also for TOC is available in the following paper %* (https://www . lexjansen . com/phuse/ 2019 /ct/CT05 . pdf) %* %* SAS Version: SAS 9.4 %* %************************************************************************************************************************; /* Examples: DATA content; ATTRIB inFile FORMAT=$255.; ATTRIB bookmark FORMAT=$255.; inFile = \"&inPath/output_1.pdf\"; bookmark = \"Table 1\"; OUTPUT; inFile = \"&inPath/output_2.pdf\"; bookmark = \"Table 2\"; OUTPUT; inFile = \"&inPath/output_3.pdf\"; bookmark = \"Table 3\"; OUTPUT; RUN; %smile_pdf_merge( data = content , outfile = &outPath/merged_output.pdf , pdfbox_jar_path = &libPath/pdfbox-app-2.0.22.jar , sourcefile = &progPath/groovy_call.sas , run_groovy = YES ); */ %************************************************************************************************************************; %MACRO smile_pdf_merge(data = , outfile = , pdfbox_jar_path = , sourcefile = TEMP, run_groovy = YES); %LOCAL macro; %LET macro = &sysmacroname ; %*; %* Error handling I - parameter checks; %*; %* check : existence of required parameters (DATA, OUTFILE, PDFBOX_JAR_PATH), abort ; %* check : existence of parameter SOURCEFILE, if not use TEMP; %* check : RUN_GROOVY must be NO or YES, abort ; %IF %LENGTH ( &data ) = 0 %THEN %DO ; %PUT %STR (ERR) OR : &macro - DATA parameter is requried. Macro will abort .; %RETURN ; %END ; %IF %LENGTH ( &outfile ) = 0 %THEN %DO ; %PUT %STR (ERR) OR : &macro - OUTFILE parameter is requried. Macro will abort .; %RETURN ; %END ; %IF %LENGTH ( &pdfbox_jar_path ) = 0 %THEN %DO ; %PUT %STR (ERR) OR : &macro - PDFBOX_JAR_PATH parameter is requried. Macro will abort .; %RETURN ; %END ; %IF %LENGTH ( &sourcefile ) = 0 %THEN %DO ; %PUT %STR (WAR)NING: &macro - SOURCEFILE parameter is needed - TEMP will be used.; %LET sourcefile = TEMP; %END ; %IF %UPCASE ( &run_groovy ) NE YES AND %UPCASE ( &run_groovy ) NE NO %THEN %DO ; %PUT %STR (ERR) OR : &macro - RUN_GROOVY parameter must be NO or YES. Macro will abort .; %RETURN ; %END ; %* check : PDFBOX_JAR_PATH must exist and must be a \".jar\" file ; %IF %SYSFUNC ( FILEEXIST( &pdfbox_jar_path )) = 0 %THEN %DO ; %PUT %STR (ERR) OR : &macro - PDFBOX_JAR_PATH file does not exist. Macro will abort .; %RETURN ; %END ; %IF %UPCASE ( %SCAN ( &pdfbox_jar_path ,- 1 ,.)) NE JAR %THEN %DO ; %PUT %STR (ERR) OR : &macro - PDFBOX_JAR_PATH must be a \".jar\" file . Macro will abort .; %RETURN ; %END ; %*; %* Preparations; %*; %* include quotes around sourcefile if not available ; DATA _NULL_ ; ATTRIB path FORMAT =$ 500 .; path = SYMGET( 'sourcefile' ); IF UPCASE( STRIP(path)) NE \"TEMP\" THEN DO ; IF SUBSTR( sourcefile, 1 , 1 ) NE '\"' AND SUBSTR( sourcefile, 1 , 1 ) NE \"'\" THEN DO ; CALL SYMPUT( 'sourcefile' , '\"' || STRIP(path) || '\"' ); END ; END ; RUN; %*; %* Error handling II - data checks; %*; %LOCAL dsid rc error ; %LET error = 0 ; %* check : existence of data, contains observations, contains variables infile and bookmark; %LET dsid= %SYSFUNC ( OPEN( &data ,is)); %IF &dsid EQ 0 %THEN %DO ; %PUT %STR (ERR) OR : &macro - DATA ( &data ) does not exist. Macro will abort .; %RETURN ; %END ; %ELSE %IF %SYSFUNC ( ATTRN( &dsid ,NLOBS)) = 0 %THEN %DO ; %PUT %STR (ERR) OR : &macro - DATA ( &data ) does not contain any observations. Macro will abort .; %LET rc= %SYSFUNC ( CLOSE( &dsid )); %RETURN ; %END ; %ELSE %IF %SYSFUNC ( VARNUM( &dsid , infile )) = 0 OR %SYSFUNC ( VARNUM( &dsid ,bookmark)) = 0 %THEN %DO ; %PUT %STR (ERR) OR : &macro - DATA ( &data ) does not contain required variables ( infile and bookmark). Macro will abort .; %LET rc= %SYSFUNC ( CLOSE( &dsid )); %RETURN ; %END ; %LET rc= %SYSFUNC ( CLOSE( &dsid )); %* check : files in variable \"infile\" must exist; %* update BOOKMARK labels, replace double quotes ; DATA _smile_indat; SET &data ; RETAIN _smile_msg 0 ; IF FILEEXIST( infile ) = 0 THEN DO ; PUT \"%STR(ERR)OR: INFILE does not exist: \" infile \" - Macro will abort.\" ; CALL SYMPUT( 'error' , '1' ); END ; IF INDEX (bookmark, '\"' ) > 0 AND _smile_msg = 0 THEN DO ; PUT \"%STR(WAR)NING: Double quotes are not supported for BOOKMARK texts and are removed.\" ; _smile_msg = 1 ; END ; bookmark = TRANWRD( bookmark, '\"' , '' ) ; RUN; %IF &error NE 0 %THEN %DO ; %GOTO end_macro; %END ; %*; %* Create PROC GROOVY program file ; %*; FILENAME cmd &sourcefile ; DATA _NULL_ ; FILE cmd LRECL= 5000 ; SET _smile_indat END =_eof; IF _N_ = 1 THEN DO ; PUT \"PROC GROOVY;\" ; PUT \" ADD CLASSPATH = \"\" &pdfbox_jar_path \"\";\" ; PUT \" SUBMIT;\" ; PUT ; PUT \"import org.apache.pdfbox.multipdf.PDFMergerUtility;\" ; PUT \"import org.apache.pdfbox.pdmodel.PDDocument;\" ; PUT \"import org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDPageDestination;\" ; PUT \"import org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDPageFitWidthDestination;\" ; PUT \"import org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDDocumentOutline;\" ; PUT \"import org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineItem;\" ; PUT \"import java.io.File;\" ; PUT ; PUT \"public class PDFMerge2 {\" ; PUT \" public static void main(String[] args) {\" ; PUT ; PUT @ 8 \"//Instantiating PDFMergerUtility class\" ; PUT @ 8 \"PDFMergerUtility PDFmerger = new PDFMergerUtility();\" ; PUT ; PUT @ 8 \"//Setting the destination file\" ; PUT @ 8 \"PDFmerger.setDestinationFileName(\"\" &outfile \"\");\" ; PUT ; PUT @ 8 \"//adding the source files\" ; END ; PUT @ 8 \"PDFmerger.addSource(new File(\"\"\" inFile +(- 1 ) \"\"\"));\" ; IF _eof THEN DO ; PUT @ 8 \"PDFmerger.mergeDocuments(null);\" ; END ; RUN; DATA _NULL_ ; FILE cmd LRECL= 5000 MOD; ATTRIB _temp FORMAT =$ 200 .; SET _smile_indat END =_eof; IF _N_ = 1 THEN DO ; PUT @ 8 \"//Open created document\" ; PUT @ 8 \"PDDocument document;\" ; PUT @ 8 \"PDPageDestination pageDestination;\" ; PUT @ 8 \"PDOutlineItem bookmark;\" ; PUT @ 8 \"document = PDDocument.load(new File(\"\" &outfile \"\"));\" ; PUT ; PUT @ 8 \"//Create a bookmark outline\" ; PUT @ 8 \"PDDocumentOutline documentOutline = new PDDocumentOutline();\" ; PUT @ 8 \"document.getDocumentCatalog().setDocumentOutline(documentOutline);\" ; PUT @ 8 ; PUT @ 8 \"int currentPage = 0;\" ; END ; _temp = SCAN( inFile ,- 1 , \"/ \\\" ); PUT @8 \" //Include file \" _temp; PUT @8 \" pageDestination = new PDPageFitWidthDestination(); \"; PUT @8 \" pageDestination . setPage(document . getPage(currentPage)); \"; PUT @8 \" bookmark = new PDOutlineItem(); \"; PUT @8 \" bookmark . setDestination(pageDestination); \"; PUT @8 \" bookmark . setTitle( \"\"\" bookmark +(-1) \"\"\" ); \"; PUT @8 \" documentOutline . addLast(bookmark); \"; PUT ; PUT @8 \" //Change currentPage number \"; PUT @8 \" currentPage += PDDocument . load(new File ( \"\"\" inFile +(-1) \"\"\" )).getNumberOfPages(); \"; PUT ; IF _eof THEN DO; PUT @8 \" //save document \"; PUT @8 \" document . save( \"\" &outfile \"\" ); \"; PUT ; PUT \" }} \"; PUT \" endsubmit; \"; PUT \" quit; \"; END; RUN; %*; %* Optionally execute PROC GROOVY code; %*; %IF %UPCASE( &run_groovy ) = YES %THEN %DO; %PUT &macro : Run Groovy Program; %PUT &macro : The following warning might come from PDFBox: %STR(WAR)NING: Removed /IDTree from /Names dictionary ...; %INCLUDE cmd; %END; %end_macro: %*; %* cleanup; %*; FILENAME cmd; PROC DATASETS LIB=WORK NOWARN NOLIST; DELETE _smile_indat; RUN; %MEND;","title":"smile_pdf_merge"},{"location":"smile_pdf_merge/#macro-smile_pdf_merge","text":"Merge multiple PDF files and create one bookmark entry per PDF file with PROC GROOVY and open-source Tool PDFBox Author: Katja Glass Date: 2021-01-29 SAS Version: SAS 9.4 License: MIT Comment: Make sure to download PDFBOX, e.g. from here https://pdfbox.apache.org/download.html - the full \"app\" version Issues: \"unable to resolve class\" messages mean the PDFBOX is not provided correctly. \"ERROR: PROCEDURE GROOVY cannot be used when SAS is in the lock down state.\" means that your SAS environment does not support PROC GROOVY, for this the macro cannot run the groovy code. \"WARNUNG: Removed /IDTree from /Names dictionary, doesn't belong there\" - this message is coming from PDFBox. Reference: A paper explaining how to use PDFBOX with PROC GROOVY also for TOC is available in the following paper (https://www.lexjansen.com/phuse/2019/ct/CT05.pdf) Example Program: test_smile_pdf_merge","title":"Macro SMILE_PDF_MERGE"},{"location":"smile_pdf_merge/#parameters","text":"Parameter Description DATA Input dataset containing INFILE and BOOKMARK variable, INFILE containing single pdf files (one file per observation), BOOKMARK containing the corresponding bookmark label for this file OUTFILE Output PDF file (not in quotes) PDFBOX_JAR_PATH Path and jar file name for PDFBOX open source tool, e.g. &path/pdfbox-app-2.0.22.jar SOURCEFILE Optional SAS program file where PROC GROOVY code is stored, default is TEMP (only temporary) RUN_GROOVY NO/YES indicator whether to run the final GROOVY code (default YES)","title":"Parameters"},{"location":"smile_pdf_merge/#examples","text":"DATA content; ATTRIB inFile FORMAT=$255.; ATTRIB bookmark FORMAT=$255.; inFile = \"&inPath/output_1.pdf\"; bookmark = \"Table 1\"; OUTPUT; inFile = \"&inPath/output_2.pdf\"; bookmark = \"Table 2\"; OUTPUT; inFile = \"&inPath/output_3.pdf\"; bookmark = \"Table 3\"; OUTPUT; RUN; %smile_pdf_merge( data = content , outfile = &outPath/merged_output.pdf , pdfbox_jar_path = &libPath/pdfbox-app-2.0.22.jar , sourcefile = &progPath/groovy_call.sas , run_groovy = YES );","title":"Examples"},{"location":"smile_pdf_merge/#checks","text":"existence of required parameters (DATA, OUTFILE, PDFBOX_JAR_PATH), abort; existence of parameter SOURCEFILE, if not use TEMP; RUN_GROOVY must be NO or YES, abort; PDFBOX_JAR_PATH must exist and must be a \".jar\" file; existence of data, contains observations, contains variables infile and bookmark; files in variable \"infile\" must exist;","title":"Checks"},{"location":"smile_pdf_merge/#macro","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 %************************************************************************************************************************; %* Project : SMILE - SAS Macros, Intuitive Library Extension %* Macro : smile_pdf_merge %* Parameters : DATA - Input dataset containing INFILE and BOOKMARK variable, %* INFILE containing single pdf files (one file per observation), %* BOOKMARK containing the corresponding bookmark label for this file %* OUTFILE - Output PDF file ( not in quotes) %* PDFBOX_JAR_PATH - Path and jar file name for PDFBOX open source tool, e . g. &path /pdfbox-app -2.0.22. jar %* SOURCEFILE - Optional SAS program file where PROC GROOVY code is stored, default is TEMP (only temporary) %* RUN_GROOVY - NO/YES indicator whether to run the final GROOVY code (default YES) %* %* Purpose : Merge multiple PDF files and create one bookmark entry per PDF file with PROC GROOVY and open-source Tool PDFBox %* Comment : Make sure to download PDFBOX, e . g. from here https://pdfbox . apache . org/download . html - the full \"app\" version %* Issues : \"unable to resolve class\" messages mean the PDFBOX is not provided correctly. %* \"ERROR: PROCEDURE GROOVY cannot be used when SAS is in the lock down state.\" means that your SAS environment %* does not support PROC GROOVY, for this the macro cannot run the groovy code. %* \"WARNUNG: Removed /IDTree from /Names dictionary, doesn't belong there\" - this message is coming from PDFBox. %* %* ExampleProg: ../programs/test_smile_pdf_merge . sas %* %* Author : Katja Glass %* Creation : 2021-01-29 %* License : MIT %* %* Reference : A paper explaining how to use PDFBOX with PROC GROOVY also for TOC is available in the following paper %* (https://www . lexjansen . com/phuse/ 2019 /ct/CT05 . pdf) %* %* SAS Version: SAS 9.4 %* %************************************************************************************************************************; /* Examples: DATA content; ATTRIB inFile FORMAT=$255.; ATTRIB bookmark FORMAT=$255.; inFile = \"&inPath/output_1.pdf\"; bookmark = \"Table 1\"; OUTPUT; inFile = \"&inPath/output_2.pdf\"; bookmark = \"Table 2\"; OUTPUT; inFile = \"&inPath/output_3.pdf\"; bookmark = \"Table 3\"; OUTPUT; RUN; %smile_pdf_merge( data = content , outfile = &outPath/merged_output.pdf , pdfbox_jar_path = &libPath/pdfbox-app-2.0.22.jar , sourcefile = &progPath/groovy_call.sas , run_groovy = YES ); */ %************************************************************************************************************************; %MACRO smile_pdf_merge(data = , outfile = , pdfbox_jar_path = , sourcefile = TEMP, run_groovy = YES); %LOCAL macro; %LET macro = &sysmacroname ; %*; %* Error handling I - parameter checks; %*; %* check : existence of required parameters (DATA, OUTFILE, PDFBOX_JAR_PATH), abort ; %* check : existence of parameter SOURCEFILE, if not use TEMP; %* check : RUN_GROOVY must be NO or YES, abort ; %IF %LENGTH ( &data ) = 0 %THEN %DO ; %PUT %STR (ERR) OR : &macro - DATA parameter is requried. Macro will abort .; %RETURN ; %END ; %IF %LENGTH ( &outfile ) = 0 %THEN %DO ; %PUT %STR (ERR) OR : &macro - OUTFILE parameter is requried. Macro will abort .; %RETURN ; %END ; %IF %LENGTH ( &pdfbox_jar_path ) = 0 %THEN %DO ; %PUT %STR (ERR) OR : &macro - PDFBOX_JAR_PATH parameter is requried. Macro will abort .; %RETURN ; %END ; %IF %LENGTH ( &sourcefile ) = 0 %THEN %DO ; %PUT %STR (WAR)NING: &macro - SOURCEFILE parameter is needed - TEMP will be used.; %LET sourcefile = TEMP; %END ; %IF %UPCASE ( &run_groovy ) NE YES AND %UPCASE ( &run_groovy ) NE NO %THEN %DO ; %PUT %STR (ERR) OR : &macro - RUN_GROOVY parameter must be NO or YES. Macro will abort .; %RETURN ; %END ; %* check : PDFBOX_JAR_PATH must exist and must be a \".jar\" file ; %IF %SYSFUNC ( FILEEXIST( &pdfbox_jar_path )) = 0 %THEN %DO ; %PUT %STR (ERR) OR : &macro - PDFBOX_JAR_PATH file does not exist. Macro will abort .; %RETURN ; %END ; %IF %UPCASE ( %SCAN ( &pdfbox_jar_path ,- 1 ,.)) NE JAR %THEN %DO ; %PUT %STR (ERR) OR : &macro - PDFBOX_JAR_PATH must be a \".jar\" file . Macro will abort .; %RETURN ; %END ; %*; %* Preparations; %*; %* include quotes around sourcefile if not available ; DATA _NULL_ ; ATTRIB path FORMAT =$ 500 .; path = SYMGET( 'sourcefile' ); IF UPCASE( STRIP(path)) NE \"TEMP\" THEN DO ; IF SUBSTR( sourcefile, 1 , 1 ) NE '\"' AND SUBSTR( sourcefile, 1 , 1 ) NE \"'\" THEN DO ; CALL SYMPUT( 'sourcefile' , '\"' || STRIP(path) || '\"' ); END ; END ; RUN; %*; %* Error handling II - data checks; %*; %LOCAL dsid rc error ; %LET error = 0 ; %* check : existence of data, contains observations, contains variables infile and bookmark; %LET dsid= %SYSFUNC ( OPEN( &data ,is)); %IF &dsid EQ 0 %THEN %DO ; %PUT %STR (ERR) OR : &macro - DATA ( &data ) does not exist. Macro will abort .; %RETURN ; %END ; %ELSE %IF %SYSFUNC ( ATTRN( &dsid ,NLOBS)) = 0 %THEN %DO ; %PUT %STR (ERR) OR : &macro - DATA ( &data ) does not contain any observations. Macro will abort .; %LET rc= %SYSFUNC ( CLOSE( &dsid )); %RETURN ; %END ; %ELSE %IF %SYSFUNC ( VARNUM( &dsid , infile )) = 0 OR %SYSFUNC ( VARNUM( &dsid ,bookmark)) = 0 %THEN %DO ; %PUT %STR (ERR) OR : &macro - DATA ( &data ) does not contain required variables ( infile and bookmark). Macro will abort .; %LET rc= %SYSFUNC ( CLOSE( &dsid )); %RETURN ; %END ; %LET rc= %SYSFUNC ( CLOSE( &dsid )); %* check : files in variable \"infile\" must exist; %* update BOOKMARK labels, replace double quotes ; DATA _smile_indat; SET &data ; RETAIN _smile_msg 0 ; IF FILEEXIST( infile ) = 0 THEN DO ; PUT \"%STR(ERR)OR: INFILE does not exist: \" infile \" - Macro will abort.\" ; CALL SYMPUT( 'error' , '1' ); END ; IF INDEX (bookmark, '\"' ) > 0 AND _smile_msg = 0 THEN DO ; PUT \"%STR(WAR)NING: Double quotes are not supported for BOOKMARK texts and are removed.\" ; _smile_msg = 1 ; END ; bookmark = TRANWRD( bookmark, '\"' , '' ) ; RUN; %IF &error NE 0 %THEN %DO ; %GOTO end_macro; %END ; %*; %* Create PROC GROOVY program file ; %*; FILENAME cmd &sourcefile ; DATA _NULL_ ; FILE cmd LRECL= 5000 ; SET _smile_indat END =_eof; IF _N_ = 1 THEN DO ; PUT \"PROC GROOVY;\" ; PUT \" ADD CLASSPATH = \"\" &pdfbox_jar_path \"\";\" ; PUT \" SUBMIT;\" ; PUT ; PUT \"import org.apache.pdfbox.multipdf.PDFMergerUtility;\" ; PUT \"import org.apache.pdfbox.pdmodel.PDDocument;\" ; PUT \"import org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDPageDestination;\" ; PUT \"import org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDPageFitWidthDestination;\" ; PUT \"import org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDDocumentOutline;\" ; PUT \"import org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineItem;\" ; PUT \"import java.io.File;\" ; PUT ; PUT \"public class PDFMerge2 {\" ; PUT \" public static void main(String[] args) {\" ; PUT ; PUT @ 8 \"//Instantiating PDFMergerUtility class\" ; PUT @ 8 \"PDFMergerUtility PDFmerger = new PDFMergerUtility();\" ; PUT ; PUT @ 8 \"//Setting the destination file\" ; PUT @ 8 \"PDFmerger.setDestinationFileName(\"\" &outfile \"\");\" ; PUT ; PUT @ 8 \"//adding the source files\" ; END ; PUT @ 8 \"PDFmerger.addSource(new File(\"\"\" inFile +(- 1 ) \"\"\"));\" ; IF _eof THEN DO ; PUT @ 8 \"PDFmerger.mergeDocuments(null);\" ; END ; RUN; DATA _NULL_ ; FILE cmd LRECL= 5000 MOD; ATTRIB _temp FORMAT =$ 200 .; SET _smile_indat END =_eof; IF _N_ = 1 THEN DO ; PUT @ 8 \"//Open created document\" ; PUT @ 8 \"PDDocument document;\" ; PUT @ 8 \"PDPageDestination pageDestination;\" ; PUT @ 8 \"PDOutlineItem bookmark;\" ; PUT @ 8 \"document = PDDocument.load(new File(\"\" &outfile \"\"));\" ; PUT ; PUT @ 8 \"//Create a bookmark outline\" ; PUT @ 8 \"PDDocumentOutline documentOutline = new PDDocumentOutline();\" ; PUT @ 8 \"document.getDocumentCatalog().setDocumentOutline(documentOutline);\" ; PUT @ 8 ; PUT @ 8 \"int currentPage = 0;\" ; END ; _temp = SCAN( inFile ,- 1 , \"/ \\\" ); PUT @8 \" //Include file \" _temp; PUT @8 \" pageDestination = new PDPageFitWidthDestination(); \"; PUT @8 \" pageDestination . setPage(document . getPage(currentPage)); \"; PUT @8 \" bookmark = new PDOutlineItem(); \"; PUT @8 \" bookmark . setDestination(pageDestination); \"; PUT @8 \" bookmark . setTitle( \"\"\" bookmark +(-1) \"\"\" ); \"; PUT @8 \" documentOutline . addLast(bookmark); \"; PUT ; PUT @8 \" //Change currentPage number \"; PUT @8 \" currentPage += PDDocument . load(new File ( \"\"\" inFile +(-1) \"\"\" )).getNumberOfPages(); \"; PUT ; IF _eof THEN DO; PUT @8 \" //save document \"; PUT @8 \" document . save( \"\" &outfile \"\" ); \"; PUT ; PUT \" }} \"; PUT \" endsubmit; \"; PUT \" quit; \"; END; RUN; %*; %* Optionally execute PROC GROOVY code; %*; %IF %UPCASE( &run_groovy ) = YES %THEN %DO; %PUT &macro : Run Groovy Program; %PUT &macro : The following warning might come from PDFBox: %STR(WAR)NING: Removed /IDTree from /Names dictionary ...; %INCLUDE cmd; %END; %end_macro: %*; %* cleanup; %*; FILENAME cmd; PROC DATASETS LIB=WORK NOWARN NOLIST; DELETE _smile_indat; RUN; %MEND;","title":"Macro"},{"location":"smile_pdf_read_bookmarks/","text":"Macro SMILE_PDF_READ_BOOKMARKS \u00b6 Read PDF Bookmarks into a SAS dataset with the variables level, title and page Author: Katja Glass Date: 2021-02-13 SAS Version: SAS 9.4 License: MIT Comment: Make sure to download PDFBOX, e.g. from here https://pdfbox.apache.org/download.html - the full \"app\" version Issues: \"unable to resolve class\" messages mean the PDFBOX is not provided correctly. \"ERROR: PROCEDURE GROOVY cannot be used when SAS is in the lock down state.\" means that your SAS environment does not support PROC GROOVY, for this the macro cannot run the groovy code. Reference: PDFBox contains a lot of useful functionalities (https://pdfbox.apache.org) Example Program: test_smile_pdf_read_bookmarks Parameters \u00b6 Parameter Description PDFFILE name of PDF file with bookmarks OUTDAT output dataset PDFBOX_JAR path and jar file name for PDFBOX open source tool, e.g. &path/pdfbox-app-2.0.22.jar Examples \u00b6 %smile_pdf_read_bookmarks(pdfFile = <path>/ods_document_flat1.pdf, outdat = book_flat1, pdfbox_jar_path = <path>/pdfbox-app-2.0.22.jar) %smile_pdf_read_bookmarks(pdfFile = <path>/ods_document_noflat1.pdf, outdat = book_noflat1, pdfbox_jar_path = <path>/pdfbox-app-2.0.22.jar) Macro \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 %************************************************************************************************************************; %* Project : SMILE - SAS Macros, Intuitive Library Extension %* Macro : smile_pdf_read_bookmarks %* Parameters : PDFFILE - name of PDF file with bookmarks %* OUTDAT - output dataset %* PDFBOX_JAR - path and jar file name for PDFBOX open source tool, e . g. &path /pdfbox-app -2.0.22. jar %* %* Purpose : Read PDF Bookmarks into a SAS dataset with the variables level, title and page %* Comment : Make sure to download PDFBOX, e . g. from here https://pdfbox . apache . org/download . html - the full \"app\" version %* Issues : \"unable to resolve class\" messages mean the PDFBOX is not provided correctly. %* \"ERROR: PROCEDURE GROOVY cannot be used when SAS is in the lock down state.\" means that your SAS environment %* does not support PROC GROOVY, for this the macro cannot run the groovy code. %* %* ExampleProg: ../programs/test_smile_pdf_read_bookmarks . sas %* %* Author : Katja Glass %* Creation : 2021-02-13 %* License : MIT %* %* Reference : PDFBox contains a lot of useful functionalities (https://pdfbox . apache . org) %* %* SAS Version: SAS 9.4 %* %************************************************************************************************************************; /* Examples: %smile_pdf_read_bookmarks(pdfFile = <path>/ods_document_flat1.pdf, outdat = book_flat1, pdfbox_jar_path = <path>/pdfbox-app-2.0.22.jar) %smile_pdf_read_bookmarks(pdfFile = <path>/ods_document_noflat1.pdf, outdat = book_noflat1, pdfbox_jar_path = <path>/pdfbox-app-2.0.22.jar) */ %************************************************************************************************************************; %MACRO smile_pdf_read_bookmarks(pdfFile = , outdat = , pdfbox_jar_path = ); %LOCAL jsonFile; FILENAME jsonFile TEMP; %LET jsonFile = %SYSFUNC ( PATHNAME( jsonFile)); FILENAME _rdbkpd TEMP ; DATA _NULL_ ; FILE _rdbkpd LRECL= 5000 ; PUT 'PROC GROOVY;' ; PUT ' ADD CLASSPATH = \"' \" &pdfbox_jar_path \" '\";' ; PUT ' SUBMIT;' ; PUT ; PUT ' import java.io.File;' ; PUT ' import java.io.FileWriter;' ; PUT ' import java.io.IOException;' ; PUT ' import java.io.PrintWriter;' ; PUT ' import java.util.ArrayList;' ; PUT ; PUT ' import org.apache.pdfbox.pdmodel.PDDocument;' ; PUT ' import org.apache.pdfbox.pdmodel.PDPage;' ; PUT ' import org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDDocumentOutline;' ; PUT ' import org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineItem;' ; PUT ' import org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineNode;' ; PUT ; PUT ' public class PDFReadBookmarks {' ; PUT ; PUT ' public static void main(String[] args) throws IOException {' ; PUT ' ArrayList<String> aBookmarks = new ArrayList<String>();' ; PUT ; PUT ' // Read the PDF document and investigate bookmarks into a list (JSON formatted)' ; PUT ' PDDocument document = PDDocument.load(new File(\"' \" &pdffile \" '\"));' ; PUT ' PDDocumentOutline outline = document.getDocumentCatalog().getDocumentOutline();' ; PUT ' addBookmark(aBookmarks, document, outline, 1);' ; PUT ' document.close();' ; PUT ; PUT ' // Print bookmark information into a file' ; PUT ' FileWriter fileWriter = new FileWriter(\"' \" &jsonFile \" '\");' ; PUT ' PrintWriter printWriter = new PrintWriter(fileWriter);' ; PUT ' printWriter.print(aBookmarks);' ; PUT ' printWriter.close();' ; PUT ' }' ; PUT ; PUT ' static public void addBookmark(ArrayList<String> bookmarks, PDDocument document, PDOutlineNode bookmark, int level) throws IOException' ; PUT ' {' ; PUT ' PDOutlineItem current = bookmark.getFirstChild();' ; PUT ' while (current != null)' ; PUT ' {' ; PUT ' PDPage currentPage = current.findDestinationPage(document);' ; PUT ' Integer pageNumber = document.getDocumentCatalog().getPages().indexOf(currentPage) + 1;' ; PUT ' String text = \"\\n{ \\\" level \\\" :\" + level + \", \\\" title \\\" : \\\" \" + current.getTitle() + \" \\\" , \\\" page \\\" :\" + pageNumber + \"}\";' ; PUT ' bookmarks.add(text);' ; PUT ' addBookmark(bookmarks, document, current, level + 1);' ; PUT ' current = current.getNextSibling();' ; PUT ' }' ; PUT ' }' ; PUT ' }' ; PUT 'ENDSUBMIT;' ; PUT 'QUIT;' ; RUN; %INCLUDE _rdbkpd; LIBNAME jsonCont JSON \" &jsonFile \" ; DATA &outdat ( DROP =ordinal_root); SET jsonCont . root ; RUN; %MEND smile_pdf_read_bookmarks;","title":"smile_pdf_read_bookmarks"},{"location":"smile_pdf_read_bookmarks/#macro-smile_pdf_read_bookmarks","text":"Read PDF Bookmarks into a SAS dataset with the variables level, title and page Author: Katja Glass Date: 2021-02-13 SAS Version: SAS 9.4 License: MIT Comment: Make sure to download PDFBOX, e.g. from here https://pdfbox.apache.org/download.html - the full \"app\" version Issues: \"unable to resolve class\" messages mean the PDFBOX is not provided correctly. \"ERROR: PROCEDURE GROOVY cannot be used when SAS is in the lock down state.\" means that your SAS environment does not support PROC GROOVY, for this the macro cannot run the groovy code. Reference: PDFBox contains a lot of useful functionalities (https://pdfbox.apache.org) Example Program: test_smile_pdf_read_bookmarks","title":"Macro SMILE_PDF_READ_BOOKMARKS"},{"location":"smile_pdf_read_bookmarks/#parameters","text":"Parameter Description PDFFILE name of PDF file with bookmarks OUTDAT output dataset PDFBOX_JAR path and jar file name for PDFBOX open source tool, e.g. &path/pdfbox-app-2.0.22.jar","title":"Parameters"},{"location":"smile_pdf_read_bookmarks/#examples","text":"%smile_pdf_read_bookmarks(pdfFile = <path>/ods_document_flat1.pdf, outdat = book_flat1, pdfbox_jar_path = <path>/pdfbox-app-2.0.22.jar) %smile_pdf_read_bookmarks(pdfFile = <path>/ods_document_noflat1.pdf, outdat = book_noflat1, pdfbox_jar_path = <path>/pdfbox-app-2.0.22.jar)","title":"Examples"},{"location":"smile_pdf_read_bookmarks/#macro","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 %************************************************************************************************************************; %* Project : SMILE - SAS Macros, Intuitive Library Extension %* Macro : smile_pdf_read_bookmarks %* Parameters : PDFFILE - name of PDF file with bookmarks %* OUTDAT - output dataset %* PDFBOX_JAR - path and jar file name for PDFBOX open source tool, e . g. &path /pdfbox-app -2.0.22. jar %* %* Purpose : Read PDF Bookmarks into a SAS dataset with the variables level, title and page %* Comment : Make sure to download PDFBOX, e . g. from here https://pdfbox . apache . org/download . html - the full \"app\" version %* Issues : \"unable to resolve class\" messages mean the PDFBOX is not provided correctly. %* \"ERROR: PROCEDURE GROOVY cannot be used when SAS is in the lock down state.\" means that your SAS environment %* does not support PROC GROOVY, for this the macro cannot run the groovy code. %* %* ExampleProg: ../programs/test_smile_pdf_read_bookmarks . sas %* %* Author : Katja Glass %* Creation : 2021-02-13 %* License : MIT %* %* Reference : PDFBox contains a lot of useful functionalities (https://pdfbox . apache . org) %* %* SAS Version: SAS 9.4 %* %************************************************************************************************************************; /* Examples: %smile_pdf_read_bookmarks(pdfFile = <path>/ods_document_flat1.pdf, outdat = book_flat1, pdfbox_jar_path = <path>/pdfbox-app-2.0.22.jar) %smile_pdf_read_bookmarks(pdfFile = <path>/ods_document_noflat1.pdf, outdat = book_noflat1, pdfbox_jar_path = <path>/pdfbox-app-2.0.22.jar) */ %************************************************************************************************************************; %MACRO smile_pdf_read_bookmarks(pdfFile = , outdat = , pdfbox_jar_path = ); %LOCAL jsonFile; FILENAME jsonFile TEMP; %LET jsonFile = %SYSFUNC ( PATHNAME( jsonFile)); FILENAME _rdbkpd TEMP ; DATA _NULL_ ; FILE _rdbkpd LRECL= 5000 ; PUT 'PROC GROOVY;' ; PUT ' ADD CLASSPATH = \"' \" &pdfbox_jar_path \" '\";' ; PUT ' SUBMIT;' ; PUT ; PUT ' import java.io.File;' ; PUT ' import java.io.FileWriter;' ; PUT ' import java.io.IOException;' ; PUT ' import java.io.PrintWriter;' ; PUT ' import java.util.ArrayList;' ; PUT ; PUT ' import org.apache.pdfbox.pdmodel.PDDocument;' ; PUT ' import org.apache.pdfbox.pdmodel.PDPage;' ; PUT ' import org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDDocumentOutline;' ; PUT ' import org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineItem;' ; PUT ' import org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineNode;' ; PUT ; PUT ' public class PDFReadBookmarks {' ; PUT ; PUT ' public static void main(String[] args) throws IOException {' ; PUT ' ArrayList<String> aBookmarks = new ArrayList<String>();' ; PUT ; PUT ' // Read the PDF document and investigate bookmarks into a list (JSON formatted)' ; PUT ' PDDocument document = PDDocument.load(new File(\"' \" &pdffile \" '\"));' ; PUT ' PDDocumentOutline outline = document.getDocumentCatalog().getDocumentOutline();' ; PUT ' addBookmark(aBookmarks, document, outline, 1);' ; PUT ' document.close();' ; PUT ; PUT ' // Print bookmark information into a file' ; PUT ' FileWriter fileWriter = new FileWriter(\"' \" &jsonFile \" '\");' ; PUT ' PrintWriter printWriter = new PrintWriter(fileWriter);' ; PUT ' printWriter.print(aBookmarks);' ; PUT ' printWriter.close();' ; PUT ' }' ; PUT ; PUT ' static public void addBookmark(ArrayList<String> bookmarks, PDDocument document, PDOutlineNode bookmark, int level) throws IOException' ; PUT ' {' ; PUT ' PDOutlineItem current = bookmark.getFirstChild();' ; PUT ' while (current != null)' ; PUT ' {' ; PUT ' PDPage currentPage = current.findDestinationPage(document);' ; PUT ' Integer pageNumber = document.getDocumentCatalog().getPages().indexOf(currentPage) + 1;' ; PUT ' String text = \"\\n{ \\\" level \\\" :\" + level + \", \\\" title \\\" : \\\" \" + current.getTitle() + \" \\\" , \\\" page \\\" :\" + pageNumber + \"}\";' ; PUT ' bookmarks.add(text);' ; PUT ' addBookmark(bookmarks, document, current, level + 1);' ; PUT ' current = current.getNextSibling();' ; PUT ' }' ; PUT ' }' ; PUT ' }' ; PUT 'ENDSUBMIT;' ; PUT 'QUIT;' ; RUN; %INCLUDE _rdbkpd; LIBNAME jsonCont JSON \" &jsonFile \" ; DATA &outdat ( DROP =ordinal_root); SET jsonCont . root ; RUN; %MEND smile_pdf_read_bookmarks;","title":"Macro"},{"location":"smile_url_check/","text":"Macro SMILE_URL_CHECK \u00b6 Check existence of URL and store result in return code, information can optionally be printed to the log Author: Katja Glass Date: 2021-01-04 SAS Version: SAS 9.4 License: MIT Comment: Return codes are 0 - url found, 999 - no url provided, 998 - url not provided in quotes, otherwise html-return code (e.g. 404 file not found) Reference: The idea from this macro is coming from a paper by Joseph Henry - The ABCs of PROC HTTP (https://www.sas.com/content/dam/SAS/support/en/sas-global-forum-proceedings/2019/3232-2019.pdf) Example Program: test_smile_url_check Parameters \u00b6 Parameter Description URL http(s) URL which should be checked in quotes RETURN return code variable (scope should be global) INFO NO/YES indicator to print information to the log Examples \u00b6 OPTIONS NONOTES; %GLOBAL rc; %smile_url_check(url=\"https://github.com/phuse-org/phuse-scripts/blob/master/whitepapers/scriptathons/central/dummy.sas\"); %PUT &rc; %smile_url_check(url=\"https://github.com/phuse-org/phuse-scripts/blob/master/whitepapers/scriptathons/central/Box_Plot_Baseline.sas\"); %PUT &rc; Checks \u00b6 URL must be provided; URL must be provided in quotes; Macro \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 %************************************************************************************************************************; %* Project : SMILE - SAS Macros, Intuitive Library Extension %* Macro : smile_url_check %* Parameters : URL - http(s) URL which should be checked in quotes %* RETURN - return code variable (scope should be global) %* INFO - NO/YES indicator to print information to the log %* %* Purpose : Check existence of URL and store result in return code, information can optionally be printed to the log %* Comment : Return codes are 0 - url found, 999 - no url provided, %* 998 - url not provided in quotes, otherwise html- return code (e . g. 404 file not found) %* %* Author : Katja Glass %* Creation : 2021-01-04 %* License : MIT %* %* Reference : The idea from this macro is coming from a paper by Joseph Henry - The ABCs of PROC HTTP %* (https://www . sas . com/content/dam/SAS/support/en/sas-global-forum-proceedings/ 2019 / 3232-2019. pdf) %* %* SAS Version: SAS 9.4 %* %************************************************************************************************************************; /* Examples: OPTIONS NONOTES; %GLOBAL rc; %smile_url_check(url=\"https://github.com/phuse-org/phuse-scripts/blob/master/whitepapers/scriptathons/central/dummy.sas\"); %PUT &rc; %smile_url_check(url=\"https://github.com/phuse-org/phuse-scripts/blob/master/whitepapers/scriptathons/central/Box_Plot_Baseline.sas\"); %PUT &rc; */ %************************************************************************************************************************; %MACRO smile_url_check(url=, return =rc, info=NO); %LOCAL macro issue; %LET macro = &sysmacroname ; %LET issue = 0 ; %* check : URL must be provided; %IF %LENGTH ( &url ) = 0 %THEN %DO ; %PUT %STR (ERR) OR : &macro - URL must be provided.; %IF %LENGTH ( &return ) > 0 %THEN %DO ; %LET &return = 999 ; %END ; %RETURN ; %END ; %* check : URL must be provided in quotes ; DATA _NULL_ ; ATTRIB url FORMAT =$ 2000 .; url = SYMGET( 'url' ); IF NOT ( SUBSTR( url, 1 , 1 ) IN ( \"'\" , '\"' ) AND SUBSTR( url, LENGTH (url)) IN ( \"'\" , '\"' )) THEN DO ; PUT \"ERR\" \"OR: &macro - URL must be provided in quotes.\" ; %IF %LENGTH ( &return ) > 0 %THEN %DO ; CALL SYMPUT( \" &return \" , \"998\" ); %END ; CALL SYMPUT( \"issue\" , \"1\" ); END ; RUN; %IF &issue = 1 %THEN %RETURN ; %* perform URL check ; FILENAME out TEMP; FILENAME hdrs TEMP ; PROC HTTP URL= &url HEADEROUT=hdrs ; RUN; DATA _NULL_ ; INFILE hdrs SCANOVER TRUNCOVER; INPUT @ 'HTTP/1.1' code 4 . message $ 255 .; %IF %LENGTH ( &return ) > 0 %THEN %DO ; IF code= 200 THEN CALL SYMPUT( \" &return \" , \"0\" ); ELSE CALL SYMPUT( \" &return \" , code); %END ; %IF %UPCASE ( &info ) NE NO %THEN %DO ; PUT \"Return Code: \" code; PUT \"Return Message: \" message ; %END ; RUN; FILENAME out ; FILENAME hdrs; %MEND smile_url_check;","title":"smile_url_check"},{"location":"smile_url_check/#macro-smile_url_check","text":"Check existence of URL and store result in return code, information can optionally be printed to the log Author: Katja Glass Date: 2021-01-04 SAS Version: SAS 9.4 License: MIT Comment: Return codes are 0 - url found, 999 - no url provided, 998 - url not provided in quotes, otherwise html-return code (e.g. 404 file not found) Reference: The idea from this macro is coming from a paper by Joseph Henry - The ABCs of PROC HTTP (https://www.sas.com/content/dam/SAS/support/en/sas-global-forum-proceedings/2019/3232-2019.pdf) Example Program: test_smile_url_check","title":"Macro SMILE_URL_CHECK"},{"location":"smile_url_check/#parameters","text":"Parameter Description URL http(s) URL which should be checked in quotes RETURN return code variable (scope should be global) INFO NO/YES indicator to print information to the log","title":"Parameters"},{"location":"smile_url_check/#examples","text":"OPTIONS NONOTES; %GLOBAL rc; %smile_url_check(url=\"https://github.com/phuse-org/phuse-scripts/blob/master/whitepapers/scriptathons/central/dummy.sas\"); %PUT &rc; %smile_url_check(url=\"https://github.com/phuse-org/phuse-scripts/blob/master/whitepapers/scriptathons/central/Box_Plot_Baseline.sas\"); %PUT &rc;","title":"Examples"},{"location":"smile_url_check/#checks","text":"URL must be provided; URL must be provided in quotes;","title":"Checks"},{"location":"smile_url_check/#macro","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 %************************************************************************************************************************; %* Project : SMILE - SAS Macros, Intuitive Library Extension %* Macro : smile_url_check %* Parameters : URL - http(s) URL which should be checked in quotes %* RETURN - return code variable (scope should be global) %* INFO - NO/YES indicator to print information to the log %* %* Purpose : Check existence of URL and store result in return code, information can optionally be printed to the log %* Comment : Return codes are 0 - url found, 999 - no url provided, %* 998 - url not provided in quotes, otherwise html- return code (e . g. 404 file not found) %* %* Author : Katja Glass %* Creation : 2021-01-04 %* License : MIT %* %* Reference : The idea from this macro is coming from a paper by Joseph Henry - The ABCs of PROC HTTP %* (https://www . sas . com/content/dam/SAS/support/en/sas-global-forum-proceedings/ 2019 / 3232-2019. pdf) %* %* SAS Version: SAS 9.4 %* %************************************************************************************************************************; /* Examples: OPTIONS NONOTES; %GLOBAL rc; %smile_url_check(url=\"https://github.com/phuse-org/phuse-scripts/blob/master/whitepapers/scriptathons/central/dummy.sas\"); %PUT &rc; %smile_url_check(url=\"https://github.com/phuse-org/phuse-scripts/blob/master/whitepapers/scriptathons/central/Box_Plot_Baseline.sas\"); %PUT &rc; */ %************************************************************************************************************************; %MACRO smile_url_check(url=, return =rc, info=NO); %LOCAL macro issue; %LET macro = &sysmacroname ; %LET issue = 0 ; %* check : URL must be provided; %IF %LENGTH ( &url ) = 0 %THEN %DO ; %PUT %STR (ERR) OR : &macro - URL must be provided.; %IF %LENGTH ( &return ) > 0 %THEN %DO ; %LET &return = 999 ; %END ; %RETURN ; %END ; %* check : URL must be provided in quotes ; DATA _NULL_ ; ATTRIB url FORMAT =$ 2000 .; url = SYMGET( 'url' ); IF NOT ( SUBSTR( url, 1 , 1 ) IN ( \"'\" , '\"' ) AND SUBSTR( url, LENGTH (url)) IN ( \"'\" , '\"' )) THEN DO ; PUT \"ERR\" \"OR: &macro - URL must be provided in quotes.\" ; %IF %LENGTH ( &return ) > 0 %THEN %DO ; CALL SYMPUT( \" &return \" , \"998\" ); %END ; CALL SYMPUT( \"issue\" , \"1\" ); END ; RUN; %IF &issue = 1 %THEN %RETURN ; %* perform URL check ; FILENAME out TEMP; FILENAME hdrs TEMP ; PROC HTTP URL= &url HEADEROUT=hdrs ; RUN; DATA _NULL_ ; INFILE hdrs SCANOVER TRUNCOVER; INPUT @ 'HTTP/1.1' code 4 . message $ 255 .; %IF %LENGTH ( &return ) > 0 %THEN %DO ; IF code= 200 THEN CALL SYMPUT( \" &return \" , \"0\" ); ELSE CALL SYMPUT( \" &return \" , code); %END ; %IF %UPCASE ( &info ) NE NO %THEN %DO ; PUT \"Return Code: \" code; PUT \"Return Message: \" message ; %END ; RUN; FILENAME out ; FILENAME hdrs; %MEND smile_url_check;","title":"Macro"},{"location":"smile_url_download/","text":"Macro SMILE_URL_DOWNLOAD \u00b6 Downloads a file from an URL and store it locally on OUTFILE. Additionally return code can be stored and information can optionally be printed to the log. Author: Katja Glass Date: 2021-01-04 SAS Version: SAS 9.4 License: MIT Comment: Return codes are 0 - URL found, 999 - no URL or OUTFILE provided, 998 - URL or OUTFILE not provided in quotes, otherwise html-return code (e.g. 404 file not found) Reference: The idea from this macro is coming from a paper by Joseph Henry - The ABCs of PROC HTTP (https://www.sas.com/content/dam/SAS/support/en/sas-global-forum-proceedings/2019/3232-2019.pdf) Parameters \u00b6 Parameter Description URL http(s) URL which should be checked in quotes OUTFILE output file provided in quotes RETURN return code variable (scope should be global) INFO NO/YES indicator to print information to the log Examples \u00b6 %smile_url_download(url=\"http://sas.cswenson.com/downloads/macros/AddFormatLib.sas\", outfile=\"/folders/myshortcuts/git/sas-dev/packages/chris_sas_macros/AddFormatLib.sas\", info=NO, return=); Checks \u00b6 URL and OUTFILE must be provided; URL and OUTFILE must be provided in quotes; Macro \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 %************************************************************************************************************************; %* Project : SMILE - SAS Macros, Intuitive Library Extension %* Macro : smile_url_download %* Parameters : URL - http(s) URL which should be checked in quotes %* OUTFILE - output file provided in quotes %* RETURN - return code variable (scope should be global) %* INFO - NO/YES indicator to print information to the log %* %* Purpose : Downloads a file from an URL and store it locally on OUTFILE. Additionally return code can be stored and %* information can optionally be printed to the log. %* Comment : Return codes are 0 - URL found, 999 - no URL or OUTFILE provided, %* 998 - URL or OUTFILE not provided in quotes, otherwise html- return code (e . g. 404 file not found) %* %* Author : Katja Glass %* Creation : 2021-01-04 %* License : MIT %* %* Reference : The idea from this macro is coming from a paper by Joseph Henry - The ABCs of PROC HTTP %* (https://www . sas . com/content/dam/SAS/support/en/sas-global-forum-proceedings/ 2019 / 3232-2019. pdf) %* %* SAS Version: SAS 9.4 %* %************************************************************************************************************************; /* Examples: %smile_url_download(url=\"http://sas.cswenson.com/downloads/macros/AddFormatLib.sas\", outfile=\"/folders/myshortcuts/git/sas-dev/packages/chris_sas_macros/AddFormatLib.sas\", info=NO, return=); */ %************************************************************************************************************************; %MACRO smile_url_download(url=, outfile=, info=NO, return =); %LOCAL macro issue; %LET macro = &sysmacroname ; %LET issue = 0 ; %* check : URL and OUTFILE must be provided; %IF %LENGTH ( &url ) = 0 OR %LENGTH ( &outfile ) %THEN %DO ; %PUT %STR (ERR) OR : &macro - URL and OUTFILE must be provided.; %IF %LENGTH ( &return ) > 0 %THEN %LET &return = 999 ; %RETURN ; %END ; %* check : URL and OUTFILE must be provided in quotes ; DATA _NULL_ ; ATTRIB url FORMAT =$ 2000 .; ATTRIB outfile FORMAT =$ 2000 .; url = SYMGET( 'url' ); IF NOT ( SUBSTR( url, 1 , 1 ) IN ( \"'\" , '\"' ) AND SUBSTR( url, LENGTH (url)) IN ( \"'\" , '\"' )) THEN DO ; PUT \"ERR\" \"OR: &macro - URL must be provided in quotes.\" ; %IF %LENGTH ( &return ) > 0 %THEN CALL SYMPUT( \" &return \" , \"998\" ); CALL SYMPUT( \"issue\" , \"1\" ); END ; outfile = SYMGET( 'outfile' ); IF NOT ( SUBSTR( outfile, 1 , 1 ) IN ( \"'\" , '\"' ) AND SUBSTR( outfile, LENGTH (outfile)) IN ( \"'\" , '\"' )) THEN DO ; PUT \"ERR\" \"OR: &macro - OUTFILE must be provided in quotes.\" ; %IF %LENGTH ( &return ) > 0 %THEN CALL SYMPUT( \" &return \" , \"998\" ); CALL SYMPUT( \"issue\" , \"1\" ); END ; RUN; %IF &issue = 1 %THEN %RETURN ; FILENAME out &outfile ; FILENAME hdrs TEMP ; PROC HTTP URL= &url OUT = out HEADEROUT=hdrs ; RUN; DATA _NULL_ ; INFILE hdrs SCANOVER TRUNCOVER; INPUT @ 'HTTP/1.1' code 4 . message $ 255 .; %IF %LENGTH ( &return ) > 0 %THEN %DO ; IF code= 200 THEN CALL SYMPUT( \" &return \" , \"0\" ); ELSE CALL SYMPUT( \" &return \" , code); %END ; %IF %UPCASE ( &info ) NE NO %THEN %DO ; PUT \"Return Code: \" code; PUT \"Return Message: \" message ; %END ; RUN; %MEND smile_url_download;","title":"smile_url_download"},{"location":"smile_url_download/#macro-smile_url_download","text":"Downloads a file from an URL and store it locally on OUTFILE. Additionally return code can be stored and information can optionally be printed to the log. Author: Katja Glass Date: 2021-01-04 SAS Version: SAS 9.4 License: MIT Comment: Return codes are 0 - URL found, 999 - no URL or OUTFILE provided, 998 - URL or OUTFILE not provided in quotes, otherwise html-return code (e.g. 404 file not found) Reference: The idea from this macro is coming from a paper by Joseph Henry - The ABCs of PROC HTTP (https://www.sas.com/content/dam/SAS/support/en/sas-global-forum-proceedings/2019/3232-2019.pdf)","title":"Macro SMILE_URL_DOWNLOAD"},{"location":"smile_url_download/#parameters","text":"Parameter Description URL http(s) URL which should be checked in quotes OUTFILE output file provided in quotes RETURN return code variable (scope should be global) INFO NO/YES indicator to print information to the log","title":"Parameters"},{"location":"smile_url_download/#examples","text":"%smile_url_download(url=\"http://sas.cswenson.com/downloads/macros/AddFormatLib.sas\", outfile=\"/folders/myshortcuts/git/sas-dev/packages/chris_sas_macros/AddFormatLib.sas\", info=NO, return=);","title":"Examples"},{"location":"smile_url_download/#checks","text":"URL and OUTFILE must be provided; URL and OUTFILE must be provided in quotes;","title":"Checks"},{"location":"smile_url_download/#macro","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 %************************************************************************************************************************; %* Project : SMILE - SAS Macros, Intuitive Library Extension %* Macro : smile_url_download %* Parameters : URL - http(s) URL which should be checked in quotes %* OUTFILE - output file provided in quotes %* RETURN - return code variable (scope should be global) %* INFO - NO/YES indicator to print information to the log %* %* Purpose : Downloads a file from an URL and store it locally on OUTFILE. Additionally return code can be stored and %* information can optionally be printed to the log. %* Comment : Return codes are 0 - URL found, 999 - no URL or OUTFILE provided, %* 998 - URL or OUTFILE not provided in quotes, otherwise html- return code (e . g. 404 file not found) %* %* Author : Katja Glass %* Creation : 2021-01-04 %* License : MIT %* %* Reference : The idea from this macro is coming from a paper by Joseph Henry - The ABCs of PROC HTTP %* (https://www . sas . com/content/dam/SAS/support/en/sas-global-forum-proceedings/ 2019 / 3232-2019. pdf) %* %* SAS Version: SAS 9.4 %* %************************************************************************************************************************; /* Examples: %smile_url_download(url=\"http://sas.cswenson.com/downloads/macros/AddFormatLib.sas\", outfile=\"/folders/myshortcuts/git/sas-dev/packages/chris_sas_macros/AddFormatLib.sas\", info=NO, return=); */ %************************************************************************************************************************; %MACRO smile_url_download(url=, outfile=, info=NO, return =); %LOCAL macro issue; %LET macro = &sysmacroname ; %LET issue = 0 ; %* check : URL and OUTFILE must be provided; %IF %LENGTH ( &url ) = 0 OR %LENGTH ( &outfile ) %THEN %DO ; %PUT %STR (ERR) OR : &macro - URL and OUTFILE must be provided.; %IF %LENGTH ( &return ) > 0 %THEN %LET &return = 999 ; %RETURN ; %END ; %* check : URL and OUTFILE must be provided in quotes ; DATA _NULL_ ; ATTRIB url FORMAT =$ 2000 .; ATTRIB outfile FORMAT =$ 2000 .; url = SYMGET( 'url' ); IF NOT ( SUBSTR( url, 1 , 1 ) IN ( \"'\" , '\"' ) AND SUBSTR( url, LENGTH (url)) IN ( \"'\" , '\"' )) THEN DO ; PUT \"ERR\" \"OR: &macro - URL must be provided in quotes.\" ; %IF %LENGTH ( &return ) > 0 %THEN CALL SYMPUT( \" &return \" , \"998\" ); CALL SYMPUT( \"issue\" , \"1\" ); END ; outfile = SYMGET( 'outfile' ); IF NOT ( SUBSTR( outfile, 1 , 1 ) IN ( \"'\" , '\"' ) AND SUBSTR( outfile, LENGTH (outfile)) IN ( \"'\" , '\"' )) THEN DO ; PUT \"ERR\" \"OR: &macro - OUTFILE must be provided in quotes.\" ; %IF %LENGTH ( &return ) > 0 %THEN CALL SYMPUT( \" &return \" , \"998\" ); CALL SYMPUT( \"issue\" , \"1\" ); END ; RUN; %IF &issue = 1 %THEN %RETURN ; FILENAME out &outfile ; FILENAME hdrs TEMP ; PROC HTTP URL= &url OUT = out HEADEROUT=hdrs ; RUN; DATA _NULL_ ; INFILE hdrs SCANOVER TRUNCOVER; INPUT @ 'HTTP/1.1' code 4 . message $ 255 .; %IF %LENGTH ( &return ) > 0 %THEN %DO ; IF code= 200 THEN CALL SYMPUT( \" &return \" , \"0\" ); ELSE CALL SYMPUT( \" &return \" , code); %END ; %IF %UPCASE ( &info ) NE NO %THEN %DO ; PUT \"Return Code: \" code; PUT \"Return Message: \" message ; %END ; RUN; %MEND smile_url_download;","title":"Macro"},{"location":"test_smile_attr_var/","text":"TEST_SMILE_ATTR_VAR \u00b6 Example program for macro calls of %smile_attr_var Author : Katja Glass Creation : 2021-02-15 SAS Version: SAS 9.4 License : MIT initialize macros %LET root = /folders/myshortcuts/git/SMILE-SmartSASMacros; OPTIONS SASAUTOS=(SASAUTOS, \" &root /macros\" ); Example 1 - simple examples \u00b6 %PUT VARTYPE for name: %smile_attr_var (sashelp . class, name, vartype); %PUT VARTYPE for age: %smile_attr_var (sashelp . class, age, vartype); %PUT VARLABEL for name: %smile_attr_var (sashelp . class, name, varlabel); %PUT VARLEN for name: %smile_attr_var (sashelp . class, name, varlen); Log Output: VARTYPE for name: C VARTYPE for age: N VARLABEL for name: VARLEN for name: 8 Example 2 - error case examples \u00b6 %PUT data does not exist: %smile_attr_var (dummy, name, varlen); %PUT variable does not exist: %smile_attr_var (sashelp . class, dummy, varlen); %PUT invalid attribute: %smile_attr_var (sashelp . class, name, dummy); Log Output: ERROR: SMILE_ATTR_VAR - DATA (dummy) does not exist. data does not exist: -1 ERROR: SMILE_ATTR_VAR - Variable VAR (dummy) does not exist in DATA (sashelp.class). variable does not exist: -1 ERROR: SMILE_ATTR_VAR - Invalid value for ATTRIB (dummy) - only the following are supported: SMILE_ATTR_VAR - VARTYPE, VARLEN, VARLABEL, VARFMT and VARINFMT invalid attribute: -1","title":"smile_attr_var"},{"location":"test_smile_attr_var/#test_smile_attr_var","text":"Example program for macro calls of %smile_attr_var Author : Katja Glass Creation : 2021-02-15 SAS Version: SAS 9.4 License : MIT initialize macros %LET root = /folders/myshortcuts/git/SMILE-SmartSASMacros; OPTIONS SASAUTOS=(SASAUTOS, \" &root /macros\" );","title":"TEST_SMILE_ATTR_VAR"},{"location":"test_smile_attr_var/#example-1-simple-examples","text":"%PUT VARTYPE for name: %smile_attr_var (sashelp . class, name, vartype); %PUT VARTYPE for age: %smile_attr_var (sashelp . class, age, vartype); %PUT VARLABEL for name: %smile_attr_var (sashelp . class, name, varlabel); %PUT VARLEN for name: %smile_attr_var (sashelp . class, name, varlen); Log Output: VARTYPE for name: C VARTYPE for age: N VARLABEL for name: VARLEN for name: 8","title":"Example 1 - simple examples"},{"location":"test_smile_attr_var/#example-2-error-case-examples","text":"%PUT data does not exist: %smile_attr_var (dummy, name, varlen); %PUT variable does not exist: %smile_attr_var (sashelp . class, dummy, varlen); %PUT invalid attribute: %smile_attr_var (sashelp . class, name, dummy); Log Output: ERROR: SMILE_ATTR_VAR - DATA (dummy) does not exist. data does not exist: -1 ERROR: SMILE_ATTR_VAR - Variable VAR (dummy) does not exist in DATA (sashelp.class). variable does not exist: -1 ERROR: SMILE_ATTR_VAR - Invalid value for ATTRIB (dummy) - only the following are supported: SMILE_ATTR_VAR - VARTYPE, VARLEN, VARLABEL, VARFMT and VARINFMT invalid attribute: -1","title":"Example 2 - error case examples"},{"location":"test_smile_attrc/","text":"TEST_SMILE_ATTRC \u00b6 Example program for macro calls of %smile_attrc Author : Katja Glass Creation : 2021-02-15 SAS Version: SAS 9.4 License : MIT initialize macros %LET root = /folders/myshortcuts/git/SMILE-SmartSASMacros; OPTIONS SASAUTOS=(SASAUTOS, \" &root /macros\" ); Example 1 - simple examples \u00b6 Create test data DATA class( LABEL = \"SASHELP Example Dataset\" ); SET sashelp . class ; RUN; PROC SORT DATA=class; BY sex ; RUN; Call macros %PUT Class label : %smile_attrc (class, label ); %PUT Class sort vars: %smile_attrc (class, sortedby); %PUT Class library: %smile_attrc (sashelp . class, lib); %PUT Class encoding: %smile_attrc (sashelp . class, encoding); Log Output: Class label: SASHELP Example Dataset Class sort vars: Sex Class library: SASHELP Class encoding: us-ascii ASCII (ANSI) Example 2 - error case examples \u00b6 %PUT invalid data: %smile_attrc (sashelp . class2, nobs); %PUT invalid attribute: %smile_attrc (sashelp . class, dummy); Log Output: ERROR: SMILE_ATTRC - Invalid value for ATTRIB (nobs). invalid data: -1 ERROR: SMILE_ATTRC - Invalid value for ATTRIB (dummy). invalid attribute: -1","title":"smile_attrc"},{"location":"test_smile_attrc/#test_smile_attrc","text":"Example program for macro calls of %smile_attrc Author : Katja Glass Creation : 2021-02-15 SAS Version: SAS 9.4 License : MIT initialize macros %LET root = /folders/myshortcuts/git/SMILE-SmartSASMacros; OPTIONS SASAUTOS=(SASAUTOS, \" &root /macros\" );","title":"TEST_SMILE_ATTRC"},{"location":"test_smile_attrc/#example-1-simple-examples","text":"Create test data DATA class( LABEL = \"SASHELP Example Dataset\" ); SET sashelp . class ; RUN; PROC SORT DATA=class; BY sex ; RUN; Call macros %PUT Class label : %smile_attrc (class, label ); %PUT Class sort vars: %smile_attrc (class, sortedby); %PUT Class library: %smile_attrc (sashelp . class, lib); %PUT Class encoding: %smile_attrc (sashelp . class, encoding); Log Output: Class label: SASHELP Example Dataset Class sort vars: Sex Class library: SASHELP Class encoding: us-ascii ASCII (ANSI)","title":"Example 1 - simple examples"},{"location":"test_smile_attrc/#example-2-error-case-examples","text":"%PUT invalid data: %smile_attrc (sashelp . class2, nobs); %PUT invalid attribute: %smile_attrc (sashelp . class, dummy); Log Output: ERROR: SMILE_ATTRC - Invalid value for ATTRIB (nobs). invalid data: -1 ERROR: SMILE_ATTRC - Invalid value for ATTRIB (dummy). invalid attribute: -1","title":"Example 2 - error case examples"},{"location":"test_smile_attrn/","text":"TEST_SMILE_ATTRN \u00b6 Example program for macro calls of %smile_attrn Author : Katja Glass Creation : 2021-02-15 SAS Version: SAS 9.4 License : MIT initialize macros %LET root = /folders/myshortcuts/git/SMILE-SmartSASMacros; OPTIONS SASAUTOS=(SASAUTOS, \" &root /macros\" ); Example 1 - simple examples \u00b6 %PUT Class NOBS( 1 ): %smile_attrn (sashelp . class, nobs); %PUT Class NOBS( 2 ): %smile_attrn (sashelp . class( WHERE =(age= 16 )), nobs); %PUT Class NLOBS: %smile_attrn (sashelp . class( WHERE =(age= 16 )), nlobs); %PUT Class NLOBSF: %smile_attrn (sashelp . class( WHERE =(age= 16 )), nlobsf); %PUT Class ANOBS( 1 ): %smile_attrn (sashelp . class, ANOBS); %PUT Class ANOBS( 2 ): %smile_attrn (sashelp . class( WHERE =(age= 1 )), ANOBS); %PUT Class NVARS: %smile_attrn (sashelp . class, NVARS); Log Output: Class NOBS(1): 19 Class NOBS(2): 19 Class NLOBS: 19 Class NLOBSF: -1 Class ANOBS(1): 1 Class ANOBS(2): 1 Class NVARS: 5 Example 2 - error case examples \u00b6 %PUT invalid data: %smile_attrn (sashelp . class2, nobs); %PUT invalid attribute: %smile_attrn (sashelp . class, dummy); Log Output: ERROR: SMILE_ATTRN - DATA (sashelp.class2) does not exist. invalid data: -1 ERROR: SMILE_ATTRN - Invalid value for ATTRIB (dummy). invalid attribute: -1","title":"smile_attrn"},{"location":"test_smile_attrn/#test_smile_attrn","text":"Example program for macro calls of %smile_attrn Author : Katja Glass Creation : 2021-02-15 SAS Version: SAS 9.4 License : MIT initialize macros %LET root = /folders/myshortcuts/git/SMILE-SmartSASMacros; OPTIONS SASAUTOS=(SASAUTOS, \" &root /macros\" );","title":"TEST_SMILE_ATTRN"},{"location":"test_smile_attrn/#example-1-simple-examples","text":"%PUT Class NOBS( 1 ): %smile_attrn (sashelp . class, nobs); %PUT Class NOBS( 2 ): %smile_attrn (sashelp . class( WHERE =(age= 16 )), nobs); %PUT Class NLOBS: %smile_attrn (sashelp . class( WHERE =(age= 16 )), nlobs); %PUT Class NLOBSF: %smile_attrn (sashelp . class( WHERE =(age= 16 )), nlobsf); %PUT Class ANOBS( 1 ): %smile_attrn (sashelp . class, ANOBS); %PUT Class ANOBS( 2 ): %smile_attrn (sashelp . class( WHERE =(age= 1 )), ANOBS); %PUT Class NVARS: %smile_attrn (sashelp . class, NVARS); Log Output: Class NOBS(1): 19 Class NOBS(2): 19 Class NLOBS: 19 Class NLOBSF: -1 Class ANOBS(1): 1 Class ANOBS(2): 1 Class NVARS: 5","title":"Example 1 - simple examples"},{"location":"test_smile_attrn/#example-2-error-case-examples","text":"%PUT invalid data: %smile_attrn (sashelp . class2, nobs); %PUT invalid attribute: %smile_attrn (sashelp . class, dummy); Log Output: ERROR: SMILE_ATTRN - DATA (sashelp.class2) does not exist. invalid data: -1 ERROR: SMILE_ATTRN - Invalid value for ATTRIB (dummy). invalid attribute: -1","title":"Example 2 - error case examples"},{"location":"test_smile_ods_document_flat_label/","text":"TEST_SMILE_ODS_DOCUMENT_FLAT_LABEL \u00b6 Example program for macro calls of %smile_ods_document_flat_label Author : Katja Glass Creation : 2021-02-18 SAS Version: SAS 9.4 License : MIT Initialize macros %LET root = <path>; OPTIONS SASAUTOS=(SASAUTOS, \" &root /macros\" ); set options for nice layout OPTIONS NODATE NONUMBER NOCENTER ORIENTATION=landscape; TITLE ; FOOTNOTE ; OPTIONS PS= 35 ; Example 1 - empty ODS Document - warning expected \u00b6 ODS DOCUMENT NAME = work . doc_empty (write); ODS DOCUMENT CLOSE; %smile_ods_document_flat_label (document=doc_empty); %PUT The warning message is expected; Log Output: WARNING: SMILE_ODS_DOCUMENT_FLAT_LABEL - DOCUMENT (doc_empty) does not contain any observations - no action done The warning message is expected Example 2 - not existing ODS Document - error expected \u00b6 %smile_ods_document_flat_label (document=doc_notexist); %PUT The error message is expected; Log Output: ERROR: SMILE_ODS_DOCUMENT_FLAT_LABEL - DOCUMENT (doc_notexist) is no existing ODS DOCUMENT. Macro will abort The error message is expected Example 3 - create flat navigation PDF using one ODS DOCUMENT \u00b6 Comment: the SAS TOC would be created a buggy linking (e.g. click \"table 2\" on TOC) this had been reported to SAS(R)- it seems to be depending on viewer and whether the PDF is maximized or not I am expecting no fix from SAS(R) include program to create one ODS document containing many reports %INCLUDE \" &root /programs/example_ods_document_many_reports.sas\" ; Create direct output without any modifications - ODS Structure for DOC_RESULTS contains several levels ODS Path ODS Type Item Label \\Report#1 Dir Table 1: By Group Report about shoes \\Report#1\\ByGroup1#1 Dir Region=Canada \\Report#1\\ByGroup1#1\\Report#1 Table \\Report#1\\ByGroup2#1 Dir Region=Pacific \\Report#1\\ByGroup2#1\\Report#1 Table \\Report#2 Dir Table 2: Table Class Output \\Report#2\\Report#1 Table \\Report#3 Dir Table 3: Multiple outputs - Cars for make = Acura \\Report#3\\Report#1 Table \\Report#4 Dir Table 4: Multiple outputs - Cars for make = Audi \\Report#4\\Report#1 Table \\Report#5 Dir Table 5: Multiple outputs - Cars for make = BMW \\Report#5\\Report#1 Table \\Report#6 Dir Table 6: Different label \\Report#6\\Report#1 Table \\SGPlot#1 Dir Figure 1: Class graphic \\SGPlot#1\\SGPlot#1 Graph The SGPlot Procedure ODS PDF FILE = \" &root /results/ods_document_noflat1.pdf\" nocontents ; PROC DOCUMENT name=doc_results; replay ; QUIT; ODS PDF CLOSE; Navigation contains two levels, e.g. BYLINE categories update the document to flatten labels %smile_ods_document_flat_label (document=doc_results); ODS Document structure is arranged flat by macro ODS Path ODS Type Item Label \\all#1 Table Table 1: By Group Report about shoes \\all#2 Table \\all#3 Table Table 2: Table Class Output \\all#4 Table Table 3: Multiple outputs - Cars for make = Acura \\all#5 Table Table 4: Multiple outputs - Cars for make = Audi \\all#6 Table Table 5: Multiple outputs - Cars for make = BMW \\all#7 Table Table 6: Different label \\all#8 Graph Figure 1: Class graphic Create PDF out of modified ODS Document ODS PDF FILE = \" &root /results/ods_document_flat1.pdf\" nocontents ; PROC DOCUMENT name=doc_results; replay ; QUIT; ODS PDF CLOSE; Navigation contains one level The following source can be used to see the structure of the ODS DOCUMENT ODS LISTING ; PROC DOCUMENT NAME=doc_results(READ); LIST / levels=all details ; RUN; ODS _ALL_ CLOSE; Example 4 - create flat navigation PDF using multiple ODS DOCUMENT - with re-labeling \u00b6 Comment: a looping macro might be feasible for generic use the SAS TOC is created and linking correctly ODS PROCLABEL is ignored as the label is coming through the re-labeling include program to create one multiple ODS documents - one per report %INCLUDE \" &root /programs/example_ods_document_single_reports.sas\" ; flat ODS Document structure per document, apply a specific label ODS Path ODS Type Item Label \\Report#1 Dir Table 1: By Group Report about shoes \\Report#1\\ByGroup1#1 Dir Region=Canada \\Report#1\\ByGroup1#1\\Report#1 Table \\Report#1\\ByGroup2#1 Dir Region=Pacific \\Report#1\\ByGroup2#1\\Report#1 Table %smile_ods_document_flat_label (document=doc_res1, label = Table 1 ); %smile_ods_document_flat_label (document=doc_res2, label = Table 2 ); %smile_ods_document_flat_label (document=doc_res3, label = Table 3 ); %smile_ods_document_flat_label (document=doc_res4, label = Table 4 ); %smile_ods_document_flat_label (document=doc_res5, label = Table 5 ); %smile_ods_document_flat_label (document=doc_res6, label = Table 6 ); %smile_ods_document_flat_label (document=doc_res_f1, label =Figure 1 ); ODS Documents are flat now using a short label ODS Path ODS Type Item Label \\all#1 Table Table 1 \\all#2 Table Create final PDF file ODS PDF FILE = \" &root /results/ods_document_flat2.pdf\" CONTENTS ; PROC DOCUMENT name=doc_res1; replay ; QUIT; PROC DOCUMENT name=doc_res2; replay ; QUIT; PROC DOCUMENT name=doc_res3; replay ; QUIT; PROC DOCUMENT name=doc_res4; replay ; QUIT; PROC DOCUMENT name=doc_res5; replay ; QUIT; PROC DOCUMENT name=doc_res6; replay ; QUIT; PROC DOCUMENT name=doc_res_f1; replay ; QUIT; ODS PDF CLOSE; Navigation and TOC contains one level with short bookmark labels, tables contain still full label Bookmarks and TOC First Table Example 5 - create flat navigation PDF using multiple ODS DOCUMENT \u00b6 Comment: a looping macro might be feasible for generic use the SAS TOC is created and linking correctly include program to create one multiple ODS documents - one per report %INCLUDE \" &root /programs/example_ods_document_single_reports.sas\" ; flat ODS Document structure per document, apply a specific label ODS Path ODS Type Item Label \\Report#1 Dir Table 1: By Group Report about shoes \\Report#1\\ByGroup1#1 Dir Region=Canada \\Report#1\\ByGroup1#1\\Report#1 Table \\Report#1\\ByGroup2#1 Dir Region=Pacific \\Report#1\\ByGroup2#1\\Report#1 Table %smile_ods_document_flat_label (document=doc_res1); %smile_ods_document_flat_label (document=doc_res2); %smile_ods_document_flat_label (document=doc_res3); %smile_ods_document_flat_label (document=doc_res4); %smile_ods_document_flat_label (document=doc_res5); %smile_ods_document_flat_label (document=doc_res6); %smile_ods_document_flat_label (document=doc_res_f1); ODS Documents are flat now using the original TITLE label ODS Path ODS Type Item Label \\all#1 Table Table 1: By Group Report about shoes \\all#2 Table Create final PDF file ODS PDF FILE = \" &root /results/ods_document_flat3.pdf\" CONTENTS ; PROC DOCUMENT name=doc_res1; replay ; QUIT; PROC DOCUMENT name=doc_res2; replay ; QUIT; PROC DOCUMENT name=doc_res3; replay ; QUIT; PROC DOCUMENT name=doc_res4; replay ; QUIT; PROC DOCUMENT name=doc_res5; replay ; QUIT; PROC DOCUMENT name=doc_res6; replay ; QUIT; PROC DOCUMENT name=doc_res_f1; replay ; QUIT; ODS PDF CLOSE; Navigation contains one level with original TITLE bookmark labels Example 6 - create flat navigation PDF using multiple ODS DOCUMENT - no entry for some items \u00b6 Comment: Table 1 and Table 3 have no label and no bookmark entry, but are included in the PDF a looping macro might be feasible for generic use the SAS TOC is created and linking correctly include program to create one multiple ODS documents - one per report %INCLUDE \" &root /programs/example_ods_document_single_reports.sas\" ; flat ODS Document structure per document, some should not contain a label ODS Path ODS Type Item Label \\Report#1 Dir Table 1: By Group Report about shoes \\Report#1\\ByGroup1#1 Dir Region=Canada \\Report#1\\ByGroup1#1\\Report#1 Table \\Report#1\\ByGroup2#1 Dir Region=Pacific \\Report#1\\ByGroup2#1\\Report#1 Table %smile_ods_document_flat_label (document=doc_res1, label =,bookmarklabel=no); %smile_ods_document_flat_label (document=doc_res2); %smile_ods_document_flat_label (document=doc_res3, label =,bookmarklabel=no); %smile_ods_document_flat_label (document=doc_res4); ODS Documents are flat now, some using no label ODS Path ODS Type Item Label \\all#1 Table \\all#2 Table Create final PDF file ODS PDF FILE = \" &root /results/ods_document_flat4.pdf\" CONTENTS ; PROC DOCUMENT name=doc_res1; replay ; QUIT; PROC DOCUMENT name=doc_res2; replay ; QUIT; PROC DOCUMENT name=doc_res3; replay ; QUIT; PROC DOCUMENT name=doc_res4; replay ; QUIT; ODS PDF CLOSE; Navigation and TOC for labeled entries, content of all is included in PDF Bookmarks and TOC Table 1 still in PDF Example 7 - create flat navigation PDF using multiple ODS DOCUMENTS with custom TOC \u00b6 Comment: Table 1 and Table 3 have no label and no bookmark entry, but are included in the PDF a looping macro might be feasible for generic use the SAS TOC is created and linking correctly create ODS Documents and flat them %INCLUDE \" &root /programs/example_ods_document_single_reports.sas\" ; %smile_ods_document_flat_label (document=doc_res1); %smile_ods_document_flat_label (document=doc_res2); %smile_ods_document_flat_label (document=doc_res3); %smile_ods_document_flat_label (document=doc_res4); store the final PDF document with REPLAY options ODS PDF FILE = \" &root /results/ods_document_flat5_custom_toc.pdf\" NOCONTENTS BOOKMARKGEN; include a custom TOC, but without an anchor PROC DOCUMENT name=doc_toc; replay ; QUIT; include tables with anchor ODS PDF ANCHOR = 'table1_x1' ; PROC DOCUMENT name=doc_res1; replay ; QUIT; ODS PDF ANCHOR = 'table2_x1' ; PROC DOCUMENT name=doc_res2; replay ; QUIT; ODS PDF ANCHOR = 'table3_x1' ; PROC DOCUMENT name=doc_res3; replay ; QUIT; ODS PDF ANCHOR = 'table4_x1' ; PROC DOCUMENT name=doc_res4; replay ; QUIT; ODS PDF CLOSE; Custom TOC and flat bookmarks are available Example 8 - create flat navigation PDF using multiple ODS DOCUMENTS - many outputs \u00b6 create 100 ODS Documents, flat them and create the output in PDF %INCLUDE \" &root /programs/example_ods_document_single_reports_big.sas\" ; %MACRO do_it(); %LOCAL i; %DO i = 1 %TO 100 ; %smile_ods_document_flat_label (document=doc_res &i ); %END ; ODS PDF FILE = \" &root /results/ods_document_flat6_big.pdf\" CONTENTS; %DO i = 1 %TO 100 ; PROC DOCUMENT name=doc_res &i ; replay ; QUIT; %END ; ODS PDF CLOSE; %MEND ; %do_it (); Flat bookmarks are available","title":"smile_ods_document_flat_label"},{"location":"test_smile_ods_document_flat_label/#test_smile_ods_document_flat_label","text":"Example program for macro calls of %smile_ods_document_flat_label Author : Katja Glass Creation : 2021-02-18 SAS Version: SAS 9.4 License : MIT Initialize macros %LET root = <path>; OPTIONS SASAUTOS=(SASAUTOS, \" &root /macros\" ); set options for nice layout OPTIONS NODATE NONUMBER NOCENTER ORIENTATION=landscape; TITLE ; FOOTNOTE ; OPTIONS PS= 35 ;","title":"TEST_SMILE_ODS_DOCUMENT_FLAT_LABEL"},{"location":"test_smile_ods_document_flat_label/#example-1-empty-ods-document-warning-expected","text":"ODS DOCUMENT NAME = work . doc_empty (write); ODS DOCUMENT CLOSE; %smile_ods_document_flat_label (document=doc_empty); %PUT The warning message is expected; Log Output: WARNING: SMILE_ODS_DOCUMENT_FLAT_LABEL - DOCUMENT (doc_empty) does not contain any observations - no action done The warning message is expected","title":"Example 1 - empty ODS Document - warning expected"},{"location":"test_smile_ods_document_flat_label/#example-2-not-existing-ods-document-error-expected","text":"%smile_ods_document_flat_label (document=doc_notexist); %PUT The error message is expected; Log Output: ERROR: SMILE_ODS_DOCUMENT_FLAT_LABEL - DOCUMENT (doc_notexist) is no existing ODS DOCUMENT. Macro will abort The error message is expected","title":"Example 2 - not existing ODS Document - error expected"},{"location":"test_smile_ods_document_flat_label/#example-3-create-flat-navigation-pdf-using-one-ods-document","text":"Comment: the SAS TOC would be created a buggy linking (e.g. click \"table 2\" on TOC) this had been reported to SAS(R)- it seems to be depending on viewer and whether the PDF is maximized or not I am expecting no fix from SAS(R) include program to create one ODS document containing many reports %INCLUDE \" &root /programs/example_ods_document_many_reports.sas\" ; Create direct output without any modifications - ODS Structure for DOC_RESULTS contains several levels ODS Path ODS Type Item Label \\Report#1 Dir Table 1: By Group Report about shoes \\Report#1\\ByGroup1#1 Dir Region=Canada \\Report#1\\ByGroup1#1\\Report#1 Table \\Report#1\\ByGroup2#1 Dir Region=Pacific \\Report#1\\ByGroup2#1\\Report#1 Table \\Report#2 Dir Table 2: Table Class Output \\Report#2\\Report#1 Table \\Report#3 Dir Table 3: Multiple outputs - Cars for make = Acura \\Report#3\\Report#1 Table \\Report#4 Dir Table 4: Multiple outputs - Cars for make = Audi \\Report#4\\Report#1 Table \\Report#5 Dir Table 5: Multiple outputs - Cars for make = BMW \\Report#5\\Report#1 Table \\Report#6 Dir Table 6: Different label \\Report#6\\Report#1 Table \\SGPlot#1 Dir Figure 1: Class graphic \\SGPlot#1\\SGPlot#1 Graph The SGPlot Procedure ODS PDF FILE = \" &root /results/ods_document_noflat1.pdf\" nocontents ; PROC DOCUMENT name=doc_results; replay ; QUIT; ODS PDF CLOSE; Navigation contains two levels, e.g. BYLINE categories update the document to flatten labels %smile_ods_document_flat_label (document=doc_results); ODS Document structure is arranged flat by macro ODS Path ODS Type Item Label \\all#1 Table Table 1: By Group Report about shoes \\all#2 Table \\all#3 Table Table 2: Table Class Output \\all#4 Table Table 3: Multiple outputs - Cars for make = Acura \\all#5 Table Table 4: Multiple outputs - Cars for make = Audi \\all#6 Table Table 5: Multiple outputs - Cars for make = BMW \\all#7 Table Table 6: Different label \\all#8 Graph Figure 1: Class graphic Create PDF out of modified ODS Document ODS PDF FILE = \" &root /results/ods_document_flat1.pdf\" nocontents ; PROC DOCUMENT name=doc_results; replay ; QUIT; ODS PDF CLOSE; Navigation contains one level The following source can be used to see the structure of the ODS DOCUMENT ODS LISTING ; PROC DOCUMENT NAME=doc_results(READ); LIST / levels=all details ; RUN; ODS _ALL_ CLOSE;","title":"Example 3 - create flat navigation PDF using one ODS DOCUMENT"},{"location":"test_smile_ods_document_flat_label/#example-4-create-flat-navigation-pdf-using-multiple-ods-document-with-re-labeling","text":"Comment: a looping macro might be feasible for generic use the SAS TOC is created and linking correctly ODS PROCLABEL is ignored as the label is coming through the re-labeling include program to create one multiple ODS documents - one per report %INCLUDE \" &root /programs/example_ods_document_single_reports.sas\" ; flat ODS Document structure per document, apply a specific label ODS Path ODS Type Item Label \\Report#1 Dir Table 1: By Group Report about shoes \\Report#1\\ByGroup1#1 Dir Region=Canada \\Report#1\\ByGroup1#1\\Report#1 Table \\Report#1\\ByGroup2#1 Dir Region=Pacific \\Report#1\\ByGroup2#1\\Report#1 Table %smile_ods_document_flat_label (document=doc_res1, label = Table 1 ); %smile_ods_document_flat_label (document=doc_res2, label = Table 2 ); %smile_ods_document_flat_label (document=doc_res3, label = Table 3 ); %smile_ods_document_flat_label (document=doc_res4, label = Table 4 ); %smile_ods_document_flat_label (document=doc_res5, label = Table 5 ); %smile_ods_document_flat_label (document=doc_res6, label = Table 6 ); %smile_ods_document_flat_label (document=doc_res_f1, label =Figure 1 ); ODS Documents are flat now using a short label ODS Path ODS Type Item Label \\all#1 Table Table 1 \\all#2 Table Create final PDF file ODS PDF FILE = \" &root /results/ods_document_flat2.pdf\" CONTENTS ; PROC DOCUMENT name=doc_res1; replay ; QUIT; PROC DOCUMENT name=doc_res2; replay ; QUIT; PROC DOCUMENT name=doc_res3; replay ; QUIT; PROC DOCUMENT name=doc_res4; replay ; QUIT; PROC DOCUMENT name=doc_res5; replay ; QUIT; PROC DOCUMENT name=doc_res6; replay ; QUIT; PROC DOCUMENT name=doc_res_f1; replay ; QUIT; ODS PDF CLOSE; Navigation and TOC contains one level with short bookmark labels, tables contain still full label Bookmarks and TOC First Table","title":"Example 4 - create flat navigation PDF using multiple ODS DOCUMENT - with re-labeling"},{"location":"test_smile_ods_document_flat_label/#example-5-create-flat-navigation-pdf-using-multiple-ods-document","text":"Comment: a looping macro might be feasible for generic use the SAS TOC is created and linking correctly include program to create one multiple ODS documents - one per report %INCLUDE \" &root /programs/example_ods_document_single_reports.sas\" ; flat ODS Document structure per document, apply a specific label ODS Path ODS Type Item Label \\Report#1 Dir Table 1: By Group Report about shoes \\Report#1\\ByGroup1#1 Dir Region=Canada \\Report#1\\ByGroup1#1\\Report#1 Table \\Report#1\\ByGroup2#1 Dir Region=Pacific \\Report#1\\ByGroup2#1\\Report#1 Table %smile_ods_document_flat_label (document=doc_res1); %smile_ods_document_flat_label (document=doc_res2); %smile_ods_document_flat_label (document=doc_res3); %smile_ods_document_flat_label (document=doc_res4); %smile_ods_document_flat_label (document=doc_res5); %smile_ods_document_flat_label (document=doc_res6); %smile_ods_document_flat_label (document=doc_res_f1); ODS Documents are flat now using the original TITLE label ODS Path ODS Type Item Label \\all#1 Table Table 1: By Group Report about shoes \\all#2 Table Create final PDF file ODS PDF FILE = \" &root /results/ods_document_flat3.pdf\" CONTENTS ; PROC DOCUMENT name=doc_res1; replay ; QUIT; PROC DOCUMENT name=doc_res2; replay ; QUIT; PROC DOCUMENT name=doc_res3; replay ; QUIT; PROC DOCUMENT name=doc_res4; replay ; QUIT; PROC DOCUMENT name=doc_res5; replay ; QUIT; PROC DOCUMENT name=doc_res6; replay ; QUIT; PROC DOCUMENT name=doc_res_f1; replay ; QUIT; ODS PDF CLOSE; Navigation contains one level with original TITLE bookmark labels","title":"Example 5 - create flat navigation PDF using multiple ODS DOCUMENT"},{"location":"test_smile_ods_document_flat_label/#example-6-create-flat-navigation-pdf-using-multiple-ods-document-no-entry-for-some-items","text":"Comment: Table 1 and Table 3 have no label and no bookmark entry, but are included in the PDF a looping macro might be feasible for generic use the SAS TOC is created and linking correctly include program to create one multiple ODS documents - one per report %INCLUDE \" &root /programs/example_ods_document_single_reports.sas\" ; flat ODS Document structure per document, some should not contain a label ODS Path ODS Type Item Label \\Report#1 Dir Table 1: By Group Report about shoes \\Report#1\\ByGroup1#1 Dir Region=Canada \\Report#1\\ByGroup1#1\\Report#1 Table \\Report#1\\ByGroup2#1 Dir Region=Pacific \\Report#1\\ByGroup2#1\\Report#1 Table %smile_ods_document_flat_label (document=doc_res1, label =,bookmarklabel=no); %smile_ods_document_flat_label (document=doc_res2); %smile_ods_document_flat_label (document=doc_res3, label =,bookmarklabel=no); %smile_ods_document_flat_label (document=doc_res4); ODS Documents are flat now, some using no label ODS Path ODS Type Item Label \\all#1 Table \\all#2 Table Create final PDF file ODS PDF FILE = \" &root /results/ods_document_flat4.pdf\" CONTENTS ; PROC DOCUMENT name=doc_res1; replay ; QUIT; PROC DOCUMENT name=doc_res2; replay ; QUIT; PROC DOCUMENT name=doc_res3; replay ; QUIT; PROC DOCUMENT name=doc_res4; replay ; QUIT; ODS PDF CLOSE; Navigation and TOC for labeled entries, content of all is included in PDF Bookmarks and TOC Table 1 still in PDF","title":"Example 6 - create flat navigation PDF using multiple ODS DOCUMENT - no entry for some items"},{"location":"test_smile_ods_document_flat_label/#example-7-create-flat-navigation-pdf-using-multiple-ods-documents-with-custom-toc","text":"Comment: Table 1 and Table 3 have no label and no bookmark entry, but are included in the PDF a looping macro might be feasible for generic use the SAS TOC is created and linking correctly create ODS Documents and flat them %INCLUDE \" &root /programs/example_ods_document_single_reports.sas\" ; %smile_ods_document_flat_label (document=doc_res1); %smile_ods_document_flat_label (document=doc_res2); %smile_ods_document_flat_label (document=doc_res3); %smile_ods_document_flat_label (document=doc_res4); store the final PDF document with REPLAY options ODS PDF FILE = \" &root /results/ods_document_flat5_custom_toc.pdf\" NOCONTENTS BOOKMARKGEN; include a custom TOC, but without an anchor PROC DOCUMENT name=doc_toc; replay ; QUIT; include tables with anchor ODS PDF ANCHOR = 'table1_x1' ; PROC DOCUMENT name=doc_res1; replay ; QUIT; ODS PDF ANCHOR = 'table2_x1' ; PROC DOCUMENT name=doc_res2; replay ; QUIT; ODS PDF ANCHOR = 'table3_x1' ; PROC DOCUMENT name=doc_res3; replay ; QUIT; ODS PDF ANCHOR = 'table4_x1' ; PROC DOCUMENT name=doc_res4; replay ; QUIT; ODS PDF CLOSE; Custom TOC and flat bookmarks are available","title":"Example 7 - create flat navigation PDF using multiple ODS DOCUMENTS with custom TOC"},{"location":"test_smile_ods_document_flat_label/#example-8-create-flat-navigation-pdf-using-multiple-ods-documents-many-outputs","text":"create 100 ODS Documents, flat them and create the output in PDF %INCLUDE \" &root /programs/example_ods_document_single_reports_big.sas\" ; %MACRO do_it(); %LOCAL i; %DO i = 1 %TO 100 ; %smile_ods_document_flat_label (document=doc_res &i ); %END ; ODS PDF FILE = \" &root /results/ods_document_flat6_big.pdf\" CONTENTS; %DO i = 1 %TO 100 ; PROC DOCUMENT name=doc_res &i ; replay ; QUIT; %END ; ODS PDF CLOSE; %MEND ; %do_it (); Flat bookmarks are available","title":"Example 8 - create flat navigation PDF using multiple ODS DOCUMENTS - many outputs"},{"location":"test_smile_pdf_merge/","text":"TEST_SMILE_PDF_MERGE \u00b6 Example program for macro calls of %smile_pdf_merge Author : Katja Glass Creation : 2021-02-18 SAS Version: SAS 9.4 License : MIT Initialize macros and variables %LET root = <path>; %LET out = &root /results; %LET libPath = &root /lib; OPTIONS SASAUTOS=(SASAUTOS, \" &root /macros\" ); Create four PDF files which should be merged %INCLUDE \" &root /programs/example_pdf_merge_create_single_pdfs.sas\" ; Example 1 - Merge PDF Documents - Create long titles \u00b6 Create the content dataset to specify files and bookmark labels DATA content; ATTRIB inFile FORMAT =$ 255 .; ATTRIB bookmark FORMAT =$ 255 .; inFile = \" &out /input_pdf_merge_1.pdf\" ; bookmark = \"Table 1: By Group Report about shoes\" ; OUTPUT ; inFile = \" &out /input_pdf_merge_2.pdf\" ; bookmark = \"Table 2: Multiple outputs - Cars for make = Acura\" ; OUTPUT ; inFile = \" &out /input_pdf_merge_3.pdf\" ; bookmark = \"Table 3: Multiple outputs - Cars for make = Audi\" ; OUTPUT ; inFile = \" &out /input_pdf_merge_4.pdf\" ; bookmark = \"Table 4: Multiple outputs - Cars for make = BMW\" ; OUTPUT ; RUN; CONTENT dataset created INFILE BOOKMARK <path>/results/input_pdf_merge_1.pdf Table 1: By Group Report about shoes <path>/results/input_pdf_merge_2.pdf Table 2: Multiple outputs - Cars for make = Acura <path>/results/input_pdf_merge_3.pdf Table 3: Multiple outputs - Cars for make = Audi <path>/results/input_pdf_merge_4.pdf Table 4: Multiple outputs - Cars for make = BMW Call macro to merge documents, additionally store GROOVY program %smile_pdf_merge ( data = content , outfile = &out /pdf_merge_output1 . pdf , pdfbox_jar_path = &libPath /pdfbox-app -2.0.22. jar , sourcefile = &out /pdf_merge_program1 . sas , run_groovy = YES ); Desired PDF file has been created Example 2 - Merge PDF Documents - Create short titles \u00b6 Create the content dataset to specify files and bookmark labels DATA content2; ATTRIB inFile FORMAT =$ 255 .; ATTRIB bookmark FORMAT =$ 255 .; inFile = \" &out /input_pdf_merge_1.pdf\" ; bookmark = \"Table 1\" ; OUTPUT ; inFile = \" &out /input_pdf_merge_2.pdf\" ; bookmark = \"Table 2\" ; OUTPUT ; inFile = \" &out /input_pdf_merge_3.pdf\" ; bookmark = \"Table 3\" ; OUTPUT ; inFile = \" &out /input_pdf_merge_4.pdf\" ; bookmark = \"Table 4\" ; OUTPUT ; RUN; CONTENT dataset created INFILE BOOKMARK <path>/results/input_pdf_merge_1.pdf Table 1: By Group Report about shoes <path>/results/input_pdf_merge_2.pdf Table 2: Multiple outputs - Cars for make = Acura <path>/results/input_pdf_merge_3.pdf Table 3: Multiple outputs - Cars for make = Audi <path>/results/input_pdf_merge_4.pdf Table 4: Multiple outputs - Cars for make = BMW Call macro to merge documents %smile_pdf_merge ( data = content2 , outfile = &out /pdf_merge_output2 . pdf , pdfbox_jar_path = &libPath /pdfbox-app -2.0.22. jar , sourcefile = &out /pdf_merge_program2 . sas , run_groovy = YES ); Desired PDF file has been created Example 3 - Merge PDF Documents - Do not store GROOVY program \u00b6 Call macro to merge documents, do not store GROOVY program %smile_pdf_merge ( data = content2 , outfile = &out /pdf_merge_output2 . pdf , pdfbox_jar_path = &libPath /pdfbox-app -2.0.22. jar ); Desired PDF file has been created","title":"smile_pdf_merge"},{"location":"test_smile_pdf_merge/#test_smile_pdf_merge","text":"Example program for macro calls of %smile_pdf_merge Author : Katja Glass Creation : 2021-02-18 SAS Version: SAS 9.4 License : MIT Initialize macros and variables %LET root = <path>; %LET out = &root /results; %LET libPath = &root /lib; OPTIONS SASAUTOS=(SASAUTOS, \" &root /macros\" ); Create four PDF files which should be merged %INCLUDE \" &root /programs/example_pdf_merge_create_single_pdfs.sas\" ;","title":"TEST_SMILE_PDF_MERGE"},{"location":"test_smile_pdf_merge/#example-1-merge-pdf-documents-create-long-titles","text":"Create the content dataset to specify files and bookmark labels DATA content; ATTRIB inFile FORMAT =$ 255 .; ATTRIB bookmark FORMAT =$ 255 .; inFile = \" &out /input_pdf_merge_1.pdf\" ; bookmark = \"Table 1: By Group Report about shoes\" ; OUTPUT ; inFile = \" &out /input_pdf_merge_2.pdf\" ; bookmark = \"Table 2: Multiple outputs - Cars for make = Acura\" ; OUTPUT ; inFile = \" &out /input_pdf_merge_3.pdf\" ; bookmark = \"Table 3: Multiple outputs - Cars for make = Audi\" ; OUTPUT ; inFile = \" &out /input_pdf_merge_4.pdf\" ; bookmark = \"Table 4: Multiple outputs - Cars for make = BMW\" ; OUTPUT ; RUN; CONTENT dataset created INFILE BOOKMARK <path>/results/input_pdf_merge_1.pdf Table 1: By Group Report about shoes <path>/results/input_pdf_merge_2.pdf Table 2: Multiple outputs - Cars for make = Acura <path>/results/input_pdf_merge_3.pdf Table 3: Multiple outputs - Cars for make = Audi <path>/results/input_pdf_merge_4.pdf Table 4: Multiple outputs - Cars for make = BMW Call macro to merge documents, additionally store GROOVY program %smile_pdf_merge ( data = content , outfile = &out /pdf_merge_output1 . pdf , pdfbox_jar_path = &libPath /pdfbox-app -2.0.22. jar , sourcefile = &out /pdf_merge_program1 . sas , run_groovy = YES ); Desired PDF file has been created","title":"Example 1 - Merge PDF Documents - Create long titles"},{"location":"test_smile_pdf_merge/#example-2-merge-pdf-documents-create-short-titles","text":"Create the content dataset to specify files and bookmark labels DATA content2; ATTRIB inFile FORMAT =$ 255 .; ATTRIB bookmark FORMAT =$ 255 .; inFile = \" &out /input_pdf_merge_1.pdf\" ; bookmark = \"Table 1\" ; OUTPUT ; inFile = \" &out /input_pdf_merge_2.pdf\" ; bookmark = \"Table 2\" ; OUTPUT ; inFile = \" &out /input_pdf_merge_3.pdf\" ; bookmark = \"Table 3\" ; OUTPUT ; inFile = \" &out /input_pdf_merge_4.pdf\" ; bookmark = \"Table 4\" ; OUTPUT ; RUN; CONTENT dataset created INFILE BOOKMARK <path>/results/input_pdf_merge_1.pdf Table 1: By Group Report about shoes <path>/results/input_pdf_merge_2.pdf Table 2: Multiple outputs - Cars for make = Acura <path>/results/input_pdf_merge_3.pdf Table 3: Multiple outputs - Cars for make = Audi <path>/results/input_pdf_merge_4.pdf Table 4: Multiple outputs - Cars for make = BMW Call macro to merge documents %smile_pdf_merge ( data = content2 , outfile = &out /pdf_merge_output2 . pdf , pdfbox_jar_path = &libPath /pdfbox-app -2.0.22. jar , sourcefile = &out /pdf_merge_program2 . sas , run_groovy = YES ); Desired PDF file has been created","title":"Example 2 - Merge PDF Documents - Create short titles"},{"location":"test_smile_pdf_merge/#example-3-merge-pdf-documents-do-not-store-groovy-program","text":"Call macro to merge documents, do not store GROOVY program %smile_pdf_merge ( data = content2 , outfile = &out /pdf_merge_output2 . pdf , pdfbox_jar_path = &libPath /pdfbox-app -2.0.22. jar ); Desired PDF file has been created","title":"Example 3 - Merge PDF Documents - Do not store GROOVY program"},{"location":"test_smile_pdf_read_bookmarks/","text":"TEST_SMILE_PDF_READ_BOOKMARKS \u00b6 Example program for macro calls of %smile_pdf_read_bookmarks Author : Katja Glass Creation : 2021-02-18 SAS Version: SAS 9.4 License : MIT Initialize macros %LET root = <path>; OPTIONS SASAUTOS=(SASAUTOS, \" &root /macros\" ); Example 1 - Read bookmarks from a document containing one bookmark level \u00b6 %smile_pdf_read_bookmarks (pdfFile = &root /results/ods_document_flat1 . pdf, outdat = book_flat1, pdfbox_jar_path = &root /lib/pdfbox-app -2.0.22. jar); Bookmarks and levels are stored in BOOK_FLAT1 LEVEL TITLE PAGE 1 Table 1: By Group Report about shoes 1 1 Table 2: Table Class Output 5 1 Table 3: Multiple outputs - Cars for make = Acura 6 1 Table 4: Multiple outputs - Cars for make = Audi 7 1 Table 5: Multiple outputs - Cars for make = BMW 8 1 Table 6: Different label 9 1 Figure 1: Class graphic 10 Example 2 - Read bookmarks from a document containing several bookmark levels \u00b6 %smile_pdf_read_bookmarks (pdfFile = &root /results/ods_document_noflat1 . pdf, outdat = book_noflat1, pdfbox_jar_path = &root /lib/pdfbox-app -2.0.22. jar); Bookmarks and levels are stored in BOOK_NOFLAT1 LEVEL TITLE PAGE 1 Table 1: By Group Report about shoes 1 2 Region=Canada 1 2 Region=Pacific 3 1 Table 2: Table Class Output 5 1 Table 3: Multiple outputs - Cars for make = Acura 6 1 Table 4: Multiple outputs - Cars for make = Audi 7 1 Table 5: Multiple outputs - Cars for make = BMW 8 1 Table 6: Different label 9 1 Figure 1: Class graphic 10 2 The SGPlot Procedure 10","title":"smile_pdf_read_bookmarks"},{"location":"test_smile_pdf_read_bookmarks/#test_smile_pdf_read_bookmarks","text":"Example program for macro calls of %smile_pdf_read_bookmarks Author : Katja Glass Creation : 2021-02-18 SAS Version: SAS 9.4 License : MIT Initialize macros %LET root = <path>; OPTIONS SASAUTOS=(SASAUTOS, \" &root /macros\" );","title":"TEST_SMILE_PDF_READ_BOOKMARKS"},{"location":"test_smile_pdf_read_bookmarks/#example-1-read-bookmarks-from-a-document-containing-one-bookmark-level","text":"%smile_pdf_read_bookmarks (pdfFile = &root /results/ods_document_flat1 . pdf, outdat = book_flat1, pdfbox_jar_path = &root /lib/pdfbox-app -2.0.22. jar); Bookmarks and levels are stored in BOOK_FLAT1 LEVEL TITLE PAGE 1 Table 1: By Group Report about shoes 1 1 Table 2: Table Class Output 5 1 Table 3: Multiple outputs - Cars for make = Acura 6 1 Table 4: Multiple outputs - Cars for make = Audi 7 1 Table 5: Multiple outputs - Cars for make = BMW 8 1 Table 6: Different label 9 1 Figure 1: Class graphic 10","title":"Example 1 - Read bookmarks from a document containing one bookmark level"},{"location":"test_smile_pdf_read_bookmarks/#example-2-read-bookmarks-from-a-document-containing-several-bookmark-levels","text":"%smile_pdf_read_bookmarks (pdfFile = &root /results/ods_document_noflat1 . pdf, outdat = book_noflat1, pdfbox_jar_path = &root /lib/pdfbox-app -2.0.22. jar); Bookmarks and levels are stored in BOOK_NOFLAT1 LEVEL TITLE PAGE 1 Table 1: By Group Report about shoes 1 2 Region=Canada 1 2 Region=Pacific 3 1 Table 2: Table Class Output 5 1 Table 3: Multiple outputs - Cars for make = Acura 6 1 Table 4: Multiple outputs - Cars for make = Audi 7 1 Table 5: Multiple outputs - Cars for make = BMW 8 1 Table 6: Different label 9 1 Figure 1: Class graphic 10 2 The SGPlot Procedure 10","title":"Example 2 - Read bookmarks from a document containing several bookmark levels"},{"location":"test_smile_url_check/","text":"TEST_SMILE_URL_CHECK \u00b6 Example program for macro calls of %smile_url_check Author : Katja Glass Creation : 2021-02-18 SAS Version: SAS 9.4 License : MIT Initialize macros %LET root = <path>; OPTIONS SASAUTOS=(SASAUTOS, \" &root /macros\" ); Pre-requisite: Internet access must be available Example 1 - Check existence of URL items (first does not exist, second exist) \u00b6 Call macros OPTIONS NONOTES; %GLOBAL rc; %smile_url_check (url= \"https://github.com/phuse-org/phuse-scripts/blob/master/whitepapers/scriptathons/central/dummy.sas\" ); %PUT &rc ; %smile_url_check (url= \"https://github.com/phuse-org/phuse-scripts/blob/master/whitepapers/scriptathons/central/Box_Plot_Baseline.sas\" ); %PUT &rc ; Log Output: 404 0 Example 2 - Invalid parameter values provided (error cases) \u00b6 Call macros %smile_url_check (url=); %PUT &rc ; %smile_url_check (url=dummy); %PUT &rc ; Log Output: ERROR: SMILE_URL_CHECK - URL must be provided. 999 ERROR: SMILE_URL_CHECK - URL must be provided in quotes. 998","title":"smile_url_check"},{"location":"test_smile_url_check/#test_smile_url_check","text":"Example program for macro calls of %smile_url_check Author : Katja Glass Creation : 2021-02-18 SAS Version: SAS 9.4 License : MIT Initialize macros %LET root = <path>; OPTIONS SASAUTOS=(SASAUTOS, \" &root /macros\" ); Pre-requisite: Internet access must be available","title":"TEST_SMILE_URL_CHECK"},{"location":"test_smile_url_check/#example-1-check-existence-of-url-items-first-does-not-exist-second-exist","text":"Call macros OPTIONS NONOTES; %GLOBAL rc; %smile_url_check (url= \"https://github.com/phuse-org/phuse-scripts/blob/master/whitepapers/scriptathons/central/dummy.sas\" ); %PUT &rc ; %smile_url_check (url= \"https://github.com/phuse-org/phuse-scripts/blob/master/whitepapers/scriptathons/central/Box_Plot_Baseline.sas\" ); %PUT &rc ; Log Output: 404 0","title":"Example 1 - Check existence of URL items (first does not exist, second exist)"},{"location":"test_smile_url_check/#example-2-invalid-parameter-values-provided-error-cases","text":"Call macros %smile_url_check (url=); %PUT &rc ; %smile_url_check (url=dummy); %PUT &rc ; Log Output: ERROR: SMILE_URL_CHECK - URL must be provided. 999 ERROR: SMILE_URL_CHECK - URL must be provided in quotes. 998","title":"Example 2 - Invalid parameter values provided (error cases)"}]}